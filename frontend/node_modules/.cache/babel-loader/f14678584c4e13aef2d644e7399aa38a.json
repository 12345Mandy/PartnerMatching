{"ast":null,"code":"var _jsxFileName = \"/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/survey_display/Survey.js\",\n    _s = $RefreshSig$();\n\nimport Question from \"./Question\";\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport firebase from \"firebase\";\nimport axios from \"axios\";\nimport fire from '../fire';\nimport \"./Survey.css\";\nimport { useRef } from \"react/cjs/react.production.min\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Survey(props) {\n  _s();\n\n  const [title, setTitle] = useState(\"loading...\");\n  const [surveyCreator, setCreator] = useState(\"\"); // use this to check if button should show up\n\n  const [description, setDescription] = useState(\"almost there...\");\n  const [questions, setQuestions] = useState([]);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [error, setError] = useState(\"\");\n  const linkRef = useRef(null);\n  const db = firebase.firestore();\n  const currentPoll = props.uniqueID;\n\n  const loadSurvey = async () => {\n    const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n    setTitle(doc.data().title);\n    setCreator(doc.data().creator); // sets creator --> if current user matches this, display button to get results\n\n    setDescription(doc.data().description);\n    const ndoc = await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get();\n    await setQuestions(ndoc.docs.map(d => d.data()));\n    let answers = new Array(ndoc.docs.length); // store answer as -1 if user hasn't answered\n\n    console.log(answers.length);\n\n    for (let i = 0; i < answers.length; i++) {\n      answers[i] = -1;\n    }\n\n    setUserAnswers(answers);\n  };\n\n  const sendResults = async () => {\n    // make a new document for submitting\n    // makes the document id the same as the user id and also overrides previous changes if the user\n    // submits twice\n    let responsesRef = db.collection(\"surveys\").doc(currentPoll).collection(\"responses\");\n    await responsesRef.doc(firebase.auth().currentUser.uid).set({\n      userID: firebase.auth().currentUser.uid,\n      email: firebase.auth().currentUser.email,\n      name: firebase.auth().currentUser.displayName,\n      responses: userAnswers\n    }).then(() => {\n      setError(\"Successfully submitted survey response!\");\n      ReactDOM.findDOMNode(Link).getElementsByClassName(\"poll\");\n      console.log(\"submitted survey response!\");\n    }).catch(error => {\n      console.error(\"Error making survey: \", error);\n      setError(\"Error submitting survey: \" + error);\n    }); // should we add a timestamp?\n  }; // on page load, load in the survey\n\n\n  useEffect(() => {\n    loadSurvey();\n  }, []); // set ID, used in child component\n\n  const setAnswerFromChild = (questionID, answer) => {\n    if (userAnswers) {\n      userAnswers[questionID] = answer;\n    }\n  }; // attempt to submit survey\n\n\n  const submitSurvey = () => {\n    console.log(userAnswers); // make sure each answer isn't null\n\n    let valid = true;\n\n    for (let i = 0; i < userAnswers.length; i++) {\n      if (userAnswers[i] === -1) {\n        valid = false;\n      }\n    }\n\n    if (valid) {\n      console.log(\"attemp ting to submit...\");\n      sendResults();\n    } else {\n      console.log(\"you didn't pick answer choices :(\");\n      setError(\"Please answer every question!\");\n    }\n  }; // checking if user is admin is hard coded in --> will be used to display button for survey results.\n\n\n  console.log(db.collection(\"surveys\").doc(currentPoll).id);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"surveyInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this), questions.map((q, qid) => /*#__PURE__*/_jsxDEV(Question, {\n        options: q.options,\n        question: q.question,\n        id: qid,\n        onSelect: setAnswerFromChild\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: submitSurvey,\n        children: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }, this), error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: `/ViewResults/${currentPoll}`,\n        className: \"poll\",\n        children: \"Check Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 17\n  }, this);\n}\n\n_s(Survey, \"xmRH7Imzke2Pz+KBiR13o6sdjjQ=\");\n\n_c = Survey;\nexport default Survey;\n\nvar _c;\n\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"sources":["/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/survey_display/Survey.js"],"names":["Question","React","useState","useEffect","Link","firebase","axios","fire","useRef","Survey","props","title","setTitle","surveyCreator","setCreator","description","setDescription","questions","setQuestions","userAnswers","setUserAnswers","error","setError","linkRef","db","firestore","currentPoll","uniqueID","loadSurvey","doc","collection","get","data","creator","ndoc","orderBy","docs","map","d","answers","Array","length","console","log","i","sendResults","responsesRef","auth","currentUser","uid","set","userID","email","name","displayName","responses","then","ReactDOM","findDOMNode","getElementsByClassName","catch","setAnswerFromChild","questionID","answer","submitSurvey","valid","id","q","qid","options","question"],"mappings":"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","sourcesContent":["import Question from \"./Question\";\nimport React, {useState, useEffect} from 'react';\nimport {Link} from 'react-router-dom'\nimport firebase from \"firebase\";\nimport axios from \"axios\";\nimport fire from '../fire'\nimport \"./Survey.css\"\nimport {useRef} from \"react/cjs/react.production.min\";\n\nfunction Survey(props) {\n    const [title, setTitle] = useState(\"loading...\");\n    const [surveyCreator, setCreator] = useState(\"\"); // use this to check if button should show up\n    const [description, setDescription] = useState(\"almost there...\");\n    const [questions, setQuestions] = useState([]);\n    const [userAnswers, setUserAnswers] = useState([]);\n    const [error, setError] = useState(\"\");\n\n    const linkRef = useRef(null);\n\n    const db = firebase.firestore();\n    const currentPoll = props.uniqueID;\n\n    const loadSurvey = async () => {\n        const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n        setTitle(doc.data().title);\n        setCreator(doc.data().creator); // sets creator --> if current user matches this, display button to get results\n        setDescription(doc.data().description);\n        const ndoc = await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get();\n        await setQuestions(ndoc.docs.map(d => d.data()));\n        let answers = new Array(ndoc.docs.length);\n        // store answer as -1 if user hasn't answered\n        console.log(answers.length);\n        for (let i = 0; i < answers.length; i++) {\n            answers[i] = -1;\n        }\n        setUserAnswers(answers);\n\n    }\n\n    const sendResults = async () => {\n        // make a new document for submitting\n\n        // makes the document id the same as the user id and also overrides previous changes if the user\n        // submits twice\n        let responsesRef = db.collection(\"surveys\").doc(currentPoll).collection(\"responses\");\n\n        await responsesRef.doc(firebase.auth().currentUser.uid).set({\n            userID: firebase.auth().currentUser.uid,\n            email: firebase.auth().currentUser.email,\n            name: firebase.auth().currentUser.displayName,\n            responses: userAnswers\n        }).then(() => {\n            setError(\"Successfully submitted survey response!\");\n\n            ReactDOM.findDOMNode(Link).getElementsByClassName(\"poll\");\n\n            console.log(\"submitted survey response!\");\n\n        }).catch((error) => {\n            console.error(\"Error making survey: \", error);\n            setError(\"Error submitting survey: \" + error);\n        });\n\n        // should we add a timestamp?\n    }\n\n\n    // on page load, load in the survey\n    useEffect(() => {\n        loadSurvey();\n    }, [])\n\n\n    // set ID, used in child component\n    const setAnswerFromChild = (questionID, answer) => {\n        if (userAnswers) {\n            userAnswers[questionID] = answer;\n        }\n    }\n\n    // attempt to submit survey\n    const submitSurvey = () => {\n        console.log(userAnswers);\n\n        // make sure each answer isn't null\n        let valid = true;\n        for (let i = 0; i < userAnswers.length; i++) {\n            if (userAnswers[i] === -1) {\n                valid = false;\n            }\n        }\n\n\n        if (valid) {\n            console.log(\"attemp ting to submit...\");\n            sendResults();\n        } else {\n            console.log(\"you didn't pick answer choices :(\");\n            setError(\"Please answer every question!\");\n        }\n    }\n\n    // checking if user is admin is hard coded in --> will be used to display button for survey results.\n        console.log(db.collection(\"surveys\").doc(currentPoll).id)\n        return (<div>\n                <div className=\"poll\">\n                    <div className=\"surveyInfo\">\n                        <h1>{title}</h1>\n                        <p>{description}</p>\n                    </div>\n                    {questions.map((q, qid) =>\n                        <Question options={q.options} question={q.question} id={qid} onSelect={setAnswerFromChild}/>\n                    )}\n                    <button type=\"button\" onClick={submitSurvey}>submit</button>\n                    {error}\n                </div>\n                <div>\n                    <Link to={`/ViewResults/${currentPoll}`} className=\"poll\">Check Results</Link>\n                </div>\n\n            </div>\n        )\n}\nexport default Survey;"]},"metadata":{},"sourceType":"module"}