{"ast":null,"code":"var _jsxFileName = \"/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/creating_surveys/SurveyCreator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { firestore } from \"firebase\";\nimport firebase from \"firebase\";\nimport NewQuestionButton from \"./NewQuestionButton\";\nimport QuestionEntry from \"./QuestionEntry\";\nimport SurveyInfoBox from \"./SurveyInfoBox\";\nimport GeneratedLink from \"./GeneratedLink\"; //TODO: delete a question or option\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SurveyCreator() {\n  _s();\n\n  const [questions, setQuestions] = useState([\"\"]);\n  const [error, setError] = useState(\"\");\n  const [inputTitle, setTitle] = useState(\"\");\n  const [descr, setDescr] = useState(\"\");\n  const [customURL, setCustomUrl] = useState(\"\");\n  const [submitted, setSubmitted] = useState(false);\n  const [questionOptions, setQuestionOptions] = useState([[\"\"]]);\n  const [questionImportance, setQuestionImportance] = useState([]);\n  const db = firebase.firestore(); // make a new question\n\n  const addAQuestion = () => {\n    setQuestions(questions => [...questions, \"\"]);\n    setQuestionOptions(questionOptions => [...questionOptions, [\"\"]]);\n    console.log(questions);\n  }; // add an answer to a question\n\n\n  const addOption = qid => {\n    console.log(questionOptions);\n    let copy = [...questionOptions];\n    copy[qid].push(\"\");\n    setQuestionOptions(copy);\n  };\n\n  const changeQuestionContent = async (id, text) => {\n    questions[id] = text; // setQuestions(questions);\n  };\n\n  const changeAnswerContent = async (qid, ansid, text) => {\n    questionOptions[qid][ansid] = text; // setQuestionOptions(questionOptions);\n  };\n\n  const changeImportance = async (qid, imp) => {\n    questionImportance[qid] = imp;\n  };\n\n  const submitSurvey = async () => {\n    // copy inputs to make sure user can't change them\n    let submittedQs = [...questions];\n    let submittedFields = [...questionOptions];\n    let submittedImp = [...questionImportance]; // check if all fields are filled\n\n    let noEmptyFields = true;\n\n    for (let i = 0; i < submittedQs.length; i++) {\n      if (submittedQs[i] === \"\") {\n        noEmptyFields = false;\n      }\n    }\n\n    for (let i = 0; i < submittedFields.length; i++) {\n      for (let j = 0; j < submittedFields[i].length; j++) {\n        if (submittedFields[i][j] === \"\") {\n          noEmptyFields = false;\n        }\n      }\n    }\n\n    for (let i = 0; i < submittedImp.length; i++) {\n      if (submittedImp === \"\") {\n        noEmptyFields = false;\n      }\n    }\n\n    if (inputTitle === \"\" || descr === \"\") {\n      noEmptyFields = false;\n    }\n\n    if (noEmptyFields) {\n      // if valid, submit to firebase\n      // make a new survey collection\n      await db.collection(\"surveys\").add({\n        creator: firebase.auth().currentUser.uid,\n        description: descr,\n        title: inputTitle\n      }).then(docRef => {\n        console.log(\"survey added with ID: \", docRef.id);\n        setCustomUrl(docRef.id); // add each question to the db\n\n        for (let i = 0; i < submittedQs.length; i++) {\n          db.collection(\"surveys\").doc(docRef.id).collection(\"questions\").add({\n            importance: submittedImp[i],\n            questionnumber: i,\n            options: submittedFields[i],\n            question: questions[i]\n          });\n        }\n\n        setSubmitted(true);\n        setError(\"Successfully submitted survey!\");\n      }).catch(error => {\n        console.error(\"Error adding document: \", error);\n        setError(\"Error submitting questions\");\n      });\n    } else {\n      setError(\"Please fill in all fields before submitting!\");\n    }\n  };\n\n  const updateDesc = newDesc => {\n    setDescr(newDesc);\n  };\n\n  const updateTitle = newTitle => {\n    setTitle(newTitle);\n  }; // on page load, make one question\n\n\n  useEffect(() => {}, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"surveyMaker\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"surveyCreatorTitle\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Create a Survey!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 45\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Survey Name:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SurveyInfoBox, {\n      placeholder: \"survey name\",\n      change: updateTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Survey Description:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SurveyInfoBox, {\n      placeholder: \"survey description\",\n      change: updateDesc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Questions:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this), questions.map((q, qid) => /*#__PURE__*/_jsxDEV(QuestionEntry, {\n      id: qid,\n      options: questionOptions[qid],\n      addAnswer: addOption,\n      change: changeQuestionContent,\n      changeAnswer: changeAnswerContent,\n      changeImp: changeImportance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this)), /*#__PURE__*/_jsxDEV(NewQuestionButton, {\n      addQuestion: addAQuestion\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: submitSurvey,\n      children: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }, this), error, /*#__PURE__*/_jsxDEV(GeneratedLink, {\n      madeLink: submitted,\n      link: \"localhost:3000/TakeSurvey/\" + customURL\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 12\n  }, this);\n}\n\n_s(SurveyCreator, \"u8HUsKcXXzp7CpkHKqTVc/mq+e4=\");\n\n_c = SurveyCreator;\nexport default SurveyCreator;\n\nvar _c;\n\n$RefreshReg$(_c, \"SurveyCreator\");","map":{"version":3,"sources":["/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/creating_surveys/SurveyCreator.js"],"names":["React","useState","useEffect","firestore","firebase","NewQuestionButton","QuestionEntry","SurveyInfoBox","GeneratedLink","SurveyCreator","questions","setQuestions","error","setError","inputTitle","setTitle","descr","setDescr","customURL","setCustomUrl","submitted","setSubmitted","questionOptions","setQuestionOptions","questionImportance","setQuestionImportance","db","addAQuestion","console","log","addOption","qid","copy","push","changeQuestionContent","id","text","changeAnswerContent","ansid","changeImportance","imp","submitSurvey","submittedQs","submittedFields","submittedImp","noEmptyFields","i","length","j","collection","add","creator","auth","currentUser","uid","description","title","then","docRef","doc","importance","questionnumber","options","question","catch","updateDesc","newDesc","updateTitle","newTitle","map","q"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { firestore } from \"firebase\";\nimport firebase from \"firebase\";\nimport NewQuestionButton from \"./NewQuestionButton\";\nimport QuestionEntry from \"./QuestionEntry\";\nimport SurveyInfoBox from \"./SurveyInfoBox\";\nimport GeneratedLink from \"./GeneratedLink\";\n\n//TODO: delete a question or option\n\nfunction SurveyCreator() {\n    const [questions, setQuestions] = useState([\"\"]);\n    const [error, setError] = useState(\"\");\n    const [inputTitle, setTitle] = useState(\"\");\n    const [descr, setDescr] = useState(\"\");\n    const [customURL, setCustomUrl] = useState(\"\");\n    const [submitted, setSubmitted] = useState(false);\n    const [questionOptions, setQuestionOptions] = useState([[\"\"]]);\n    const [questionImportance, setQuestionImportance] = useState([]);\n\n    const db = firebase.firestore();\n\n    // make a new question\n    const addAQuestion = () => {\n        setQuestions(questions => [...questions, \"\"]);\n        setQuestionOptions(questionOptions => [...questionOptions, [\"\"]]);\n        console.log(questions);\n    }\n\n    // add an answer to a question\n    const addOption = (qid) => {\n        console.log(questionOptions);\n        let copy = [...questionOptions];\n        copy[qid].push(\"\");\n        setQuestionOptions(copy);\n    }\n\n    const changeQuestionContent = async (id, text) => {\n        questions[id] = text;\n        // setQuestions(questions);\n    }\n\n    const changeAnswerContent = async (qid, ansid, text) => {\n        questionOptions[qid][ansid] = text;\n        // setQuestionOptions(questionOptions);\n    }\n\n    const changeImportance = async (qid, imp) => {\n        questionImportance[qid] = imp;\n    }\n\n    const submitSurvey = async () => {\n        // copy inputs to make sure user can't change them\n        let submittedQs = [...questions];\n        let submittedFields = [...questionOptions];\n        let submittedImp = [...questionImportance];\n\n        // check if all fields are filled\n\n        let noEmptyFields = true;\n        for(let i = 0; i < submittedQs.length; i++) {\n            if(submittedQs[i] === \"\") {\n                noEmptyFields = false;\n            }\n        }\n\n        for(let i = 0; i < submittedFields.length; i++) {\n            for(let j = 0; j < submittedFields[i].length; j++) {\n                if(submittedFields[i][j] === \"\") {\n                    noEmptyFields = false;\n                }\n            }\n        }\n\n        for(let i = 0; i < submittedImp.length; i++) {\n            if(submittedImp === \"\") {\n                noEmptyFields = false;\n            }\n        }\n\n        if(inputTitle === \"\" || descr === \"\") {\n            noEmptyFields = false;\n        }\n\n        if(noEmptyFields) {\n            // if valid, submit to firebase\n            // make a new survey collection\n            await db.collection(\"surveys\").add({\n                creator : firebase.auth().currentUser.uid,\n                description : descr,\n                title: inputTitle\n            }).then(docRef => {\n                console.log(\"survey added with ID: \", docRef.id);\n                setCustomUrl(docRef.id);\n                // add each question to the db\n                for(let i = 0; i < submittedQs.length; i++) {\n                    db.collection(\"surveys\").doc(docRef.id).collection(\"questions\").add({\n                        importance: submittedImp[i],\n                        questionnumber: i,\n                        options: submittedFields[i],\n                        question: questions[i]\n                    })\n                }\n                setSubmitted(true);\n                setError(\"Successfully submitted survey!\");\n\n            }).catch(error => {console.error(\"Error adding document: \", error);\n                setError(\"Error submitting questions\")});\n\n\n        } else {\n            setError(\"Please fill in all fields before submitting!\");\n        }\n\n\n    }\n\n    const updateDesc = (newDesc) => {\n        setDescr(newDesc);\n    }\n\n    const updateTitle = (newTitle) => {\n        setTitle(newTitle);\n    }\n\n    // on page load, make one question\n    useEffect( () => {\n\n    }, [])\n\n    return(<div className=\"surveyMaker\">\n        <div className=\"surveyCreatorTitle\"><h1>Create a Survey!</h1></div>\n        <h3>Survey Name:</h3>\n        <SurveyInfoBox placeholder=\"survey name\" change={updateTitle}/>\n        <h3>Survey Description:</h3>\n        <SurveyInfoBox placeholder=\"survey description\" change={updateDesc}/>\n        <h3>Questions:</h3>\n        {questions.map((q, qid) =>\n            <QuestionEntry id={qid} options={questionOptions[qid]} addAnswer={addOption} change={changeQuestionContent}\n                           changeAnswer={changeAnswerContent} changeImp={changeImportance}/>)}\n        <NewQuestionButton addQuestion={addAQuestion}/>\n        <button type=\"button\" onClick={submitSurvey}>submit</button>\n        {error}\n        <GeneratedLink madeLink={submitted} link={\"localhost:3000/TakeSurvey/\" + customURL}/>\n\n    </div>);\n\n}\n\nexport default SurveyCreator;"]},"metadata":{},"sourceType":"module"}