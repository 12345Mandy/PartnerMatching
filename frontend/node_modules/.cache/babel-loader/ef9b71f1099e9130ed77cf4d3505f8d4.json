{"ast":null,"code":"var _jsxFileName = \"/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/Alana_stuff/SurveyAdmin.js\",\n    _s = $RefreshSig$();\n\nimport DisplayPerson from \"./DisplayPerson\";\nimport DisplayPair from \"./DisplayPair.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport firebase from \"firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SurveyAdmin(props) {\n  _s();\n\n  const [surveyCreator, setCreator] = useState(\"\"); // use this to check if button should show up\n\n  const [displayResults, setDisplayResults] = useState(false);\n  const [title, setTitle] = useState(\"loading...\");\n  const [results, setResults] = useState([]);\n  const [pairs, setPairs] = useState(new Map());\n  const db = firebase.firestore(); // EDIT THIS DEPENDING ON WHAT SURVEY IS NEEDED.\n\n  const currentPoll = props.uniqueID; // on page load, load in the survey\n\n  useEffect(() => {\n    loadInfo();\n    updateDisplayResults().then(results => {\n      if (results) {\n        // initializes the pairs for users if they're ready\n        db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\").doc(\"generatedPairs\").get().then(d => {\n          setPairs(d.data());\n        });\n      }\n    });\n  }, []);\n\n  const generatePairs = async () => {\n    let allQuestions = (await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get()).docs.map(d => d.data());\n    let answers = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data()); // assumes that responses array has the index represent question id and value represent which answer\n    // was picked\n\n    const toSend = {\n      questions: allQuestions,\n      answers: answers\n    };\n    let config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n    axios.post(\"http://localhost:4567/match\", toSend, config).then(response => {\n      console.log(response.data);\n      let map = new Map();\n      let dictionary = response.data[\"pairs\"];\n      Object.keys(dictionary).forEach(function (key, value) {\n        map.set(key, value);\n      });\n      setPairs(map);\n      db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\").doc(\"generatedPairs\").set({\n        pairs: response.data[\"pairs\"]\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }; // sets any info needed for survey\n\n\n  const loadInfo = async () => {\n    const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n    setCreator(doc.data().creator); // sets creator --> if current user matches this, display button to get results\n\n    setTitle(doc.data().title);\n    let temp = [];\n    const responses = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n    responses.forEach(user => {\n      temp.push(user);\n    });\n    setResults(temp);\n  };\n\n  const onPairClicked = () => {\n    console.log(\"Temp has: \" + results);\n    console.log(results);\n  };\n\n  const updateDisplayResults = async () => {\n    let results = await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\").doc(\"generatedPairs\").get().then(a => a.get(\"pairs\") !== undefined).catch(error => console.log(error));\n    setDisplayResults(results);\n    return results;\n  };\n\n  if (surveyCreator === firebase.auth().currentUser.uid) {\n    console.log(\"in admin\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Current Survey Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: results && results.map(user => {\n          return /*#__PURE__*/_jsxDEV(DisplayPerson, {\n            name: user.userID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: generatePairs,\n        children: \"Click for Pairs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: pairs && Object.entries(pairs).map(([key, value]) => {\n          return /*#__PURE__*/_jsxDEV(DisplayPair, {\n            user1: key,\n            user2: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this);\n  } else {\n    // console.log(pairs)\n    // const getPairs = async () => {\n    //     let pairs = await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n    //         .doc(\"generatedPairs\").get().then(snap =>snap.data())\n    //    console.log(pairs[0])\n    // }\n    // getPairs()\n    // if the pairs aren't ready, then it should be undefined; and vice versa\n    console.log(displayResults);\n\n    if (displayResults) {\n      console.log(pairs.get(\"A\"));\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onPairClicked,\n          children: \"Your Current Pair\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(DisplayPair, {\n            user1: \"A\",\n            user2: pairs[\"A\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 25\n        }, this), \"Survey Results Aren't Ready Yet!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }, this);\n    }\n  }\n}\n\n_s(SurveyAdmin, \"jtRjJykB7Okln9sNu2+BbXeXSzA=\");\n\n_c = SurveyAdmin;\nexport default SurveyAdmin;\n\nvar _c;\n\n$RefreshReg$(_c, \"SurveyAdmin\");","map":{"version":3,"sources":["/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/Alana_stuff/SurveyAdmin.js"],"names":["DisplayPerson","DisplayPair","React","useEffect","useState","axios","firebase","SurveyAdmin","props","surveyCreator","setCreator","displayResults","setDisplayResults","title","setTitle","results","setResults","pairs","setPairs","Map","db","firestore","currentPoll","uniqueID","loadInfo","updateDisplayResults","then","collection","doc","get","d","data","generatePairs","allQuestions","orderBy","docs","map","answers","toSend","questions","config","headers","post","response","console","log","dictionary","Object","keys","forEach","key","value","set","catch","error","creator","temp","responses","user","push","onPairClicked","a","undefined","auth","currentUser","uid","userID","entries"],"mappings":"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","sourcesContent":["import DisplayPerson from \"./DisplayPerson\";\nimport DisplayPair from \"./DisplayPair.js\";\nimport React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport firebase from \"firebase\";\n\nfunction SurveyAdmin(props) {\n    const [surveyCreator, setCreator] = useState(\"\"); // use this to check if button should show up\n\n    const [displayResults, setDisplayResults] = useState(false);\n    const [title, setTitle] = useState(\"loading...\");\n    const [results, setResults] = useState([])\n    const [pairs, setPairs] = useState(new Map())\n    const db = firebase.firestore();\n    // EDIT THIS DEPENDING ON WHAT SURVEY IS NEEDED.\n    const currentPoll = props.uniqueID;\n\n    // on page load, load in the survey\n    useEffect(() => {\n        loadInfo();\n        updateDisplayResults().then(results => {\n            if (results) {\n                // initializes the pairs for users if they're ready\n                db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n                    .doc(\"generatedPairs\").get().then(d => {\n                        \n                    setPairs(d.data());\n                })\n            }\n        })\n    }, [])\n\n    const generatePairs = async () => {\n        let allQuestions = (await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get()).docs.map(d => d.data());\n        let answers = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n\n        // assumes that responses array has the index represent question id and value represent which answer\n        // was picked\n        const toSend = {\n            questions: allQuestions,\n            answers: answers\n        };\n\n        let config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Access-Control-Allow-Origin': '*',\n            }\n        };\n\n        axios.post(\n            \"http://localhost:4567/match\",\n            toSend,\n            config\n        ).then(response => {\n            console.log(response.data)\n            let map = new Map();\n            let dictionary = response.data[\"pairs\"];\n\n            Object.keys(dictionary).forEach(function(key, value) {\n                map.set(key, value);\n            });\n\n            setPairs(map);\n\n            db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n                .doc(\"generatedPairs\").set(\n                {pairs: response.data[\"pairs\"]}\n            )\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    // sets any info needed for survey\n    const loadInfo = async () => {\n        const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n        setCreator(doc.data().creator); // sets creator --> if current user matches this, display button to get results\n        setTitle(doc.data().title);\n        let temp = []\n        const responses =\n            (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n        responses.forEach(user => {\n            temp.push(user)\n        })\n\n        setResults(temp)\n    }\n\n    const onPairClicked = () => {\n        console.log(\"Temp has: \" + results);\n        console.log(results);\n    }\n\n    const updateDisplayResults = async () => {\n        let results = await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n            .doc(\"generatedPairs\").get()\n            .then(a => a.get(\"pairs\") !== undefined).catch(error =>\n                console.log(error))\n        setDisplayResults(results);\n        return results;\n    }\n\n    if (surveyCreator === firebase.auth().currentUser.uid) {\n        console.log(\"in admin\");\n        return (\n            <div className=\"poll\">\n                <h1>{title}</h1>\n                <button>Current Survey Results</button>\n                <div>\n                    {results && results.map(user => {\n                        return (<DisplayPerson\n                            name={user.userID}\n                        />);\n                    })}\n                </div>\n                <button type=\"button\" onClick={generatePairs}>Click for Pairs</button>\n                <div>\n                    {pairs && Object.entries(pairs).map(([key, value]) => {\n                        return (<DisplayPair\n                            user1={key}\n                            user2={value}\n                        />);\n                    })}\n                </div>\n            </div>\n        );\n    } else {\n        // console.log(pairs)\n        // const getPairs = async () => {\n        //     let pairs = await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n        //         .doc(\"generatedPairs\").get().then(snap =>snap.data())\n        //    console.log(pairs[0])\n        // }\n        // getPairs()\n\n        // if the pairs aren't ready, then it should be undefined; and vice versa\n\n        console.log(displayResults);\n        if (displayResults) {\n            console.log(pairs.get(\"A\"))\n            return (\n                <div className=\"poll\">\n                    <h1>{title}</h1>\n                    <button onClick={onPairClicked}>Your Current Pair</button>\n                    <div>\n                        <DisplayPair\n                            user1={\"A\"}\n                            user2={pairs[\"A\"]}/>\n                    </div>\n\n                </div>\n        );\n        } else\n            {\n                return (\n                    <div className=\"poll\">\n                        <h1>{title}</h1>\n                        Survey Results Aren't Ready Yet!\n                    </div>\n                );\n            }\n        }\n\n        }\n\n\n        export default SurveyAdmin;"]},"metadata":{},"sourceType":"module"}