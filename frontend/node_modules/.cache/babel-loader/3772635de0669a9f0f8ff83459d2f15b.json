{"ast":null,"code":"var _jsxFileName = \"/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/survey_display/SurveyAdmin.js\",\n    _s = $RefreshSig$();\n\nimport DisplayPerson from \"./DisplayPerson\";\nimport DisplayPair from \"./DisplayPair.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport axios from \"axios\";\nimport firebase from \"firebase\";\nimport UserDisplayPair from \"./UserDisplayPair\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SurveyAdmin(props) {\n  _s();\n\n  const surveyCreator = useRef(null);\n  const [displayResults, setDisplayResults] = useState(false);\n  const [title, setTitle] = useState(\"loading...\");\n  const [results, setResults] = useState([]);\n  const [pairs, setPairs] = useState({});\n  const [userData, setUserData] = useState({});\n  const [partnerData, setPartnerData] = useState([]);\n  const [idToName, setIDToName] = useState({});\n  const db = firebase.firestore();\n  const currentPoll = props.uniqueID; // on page load, load in the survey\n\n  useEffect(() => {\n    loadInfo();\n    updateDisplayResults().then(results => {\n      const currUser = firebase.auth().currentUser.uid;\n      console.log(currUser);\n      console.log(surveyCreator);\n\n      if (results && currUser !== surveyCreator.current) {\n        // initializes the pairs for users if they're ready\n        db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\").doc(\"generatedPairs\").get().then(d => {\n          let pairs = d.data();\n          let partnerList = pairs.pairs[currUser];\n          let partDataList = [];\n\n          for (let i = 0; i < partnerList.length; i++) {\n            db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").doc(partnerList[i]).get().then(a => partDataList.push(a.data()));\n          }\n\n          setPartnerData(partDataList);\n          db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").doc(currUser).get().then(a => setUserData(a.data()));\n        });\n      }\n\n      setDisplayResults(results);\n    });\n  }, []);\n\n  const generatePairs = async () => {\n    let allQuestions = (await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get()).docs.map(d => d.data());\n    let answers = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data()); // assumes that responses array has the index represent question id and value represent which answer\n    // was picked\n\n    const toSend = {\n      questions: allQuestions,\n      answers: answers\n    };\n    console.log(answers);\n    let config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n    axios.post(\"http://localhost:4567/match\", toSend, config).then(async response => {\n      console.log(response.data);\n      setPairs(response.data[\"pairs\"]);\n      console.log(response.data[\"pairs\"]);\n      await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\").doc(\"generatedPairs\").set({\n        pairs: response.data[\"pairs\"]\n      });\n      let idToNameTemp = {};\n\n      for (const [key, value] of Object.entries(response.data[\"pairs\"])) {\n        let nameKey = await getNameFromUserID(key);\n        let nameValue = [];\n\n        for (let i = 0; i < value.length; i++) {\n          nameValue.push(await getNameFromUserID(value[i]));\n        }\n\n        idToNameTemp[nameKey] = nameValue;\n      }\n\n      console.log(idToNameTemp);\n      setIDToName(idToNameTemp);\n    }).catch(error => {\n      console.log(error);\n      alert(\"Oops, something went wrong.\");\n    });\n  }; // sets any info needed for survey\n\n\n  const loadInfo = async () => {\n    const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n    surveyCreator.current = doc.data().creator; // sets creator --> if current user matches this, display button to get results\n\n    setTitle(doc.data().title);\n    let temp = [];\n    const responses = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n    responses.forEach(user => {\n      temp.push(user);\n    });\n    setResults(temp);\n  };\n\n  const updateDisplayResults = async () => {\n    return await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\").doc(\"generatedPairs\").get().then(a => a.get(\"pairs\") !== undefined).catch(error => console.log(error));\n  };\n\n  const deleteSurvey = () => {\n    let input = prompt(\"Type DELETE to delete this survey.\");\n\n    if (input === \"DELETE\") {\n      const thisSurvey = db.collection(\"surveys\").doc(currentPoll); // apparently this doesn't delete subcollections so welp\n\n      thisSurvey.delete().then(x => {\n        alert(\"Survey Successfully Deleted!\");\n        window.location.replace(\"http://localhost:3000/Homepage\");\n      });\n    }\n  };\n\n  const deleteResponse = () => {\n    let input = prompt(\"Type DELETE to delete your response to this survey.\");\n\n    if (input === \"DELETE\") {\n      const userResponseRef = db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").doc(firebase.auth().currentUser.uid); // apparently this doesn't delete subcollections so welp\n\n      userResponseRef.delete().then(x => {\n        alert(\"Survey Successfully Deleted!\");\n        window.location.replace(\"http://localhost:3000/Homepage\");\n      });\n    }\n  };\n\n  const getNameFromUserID = async userID => {\n    console.log(\"Curr ID is: \" + userID);\n    const responsesRef = db.collection(\"surveys\").doc(currentPoll).collection(\"responses\");\n    const ref = await responsesRef.doc(userID).get();\n    return ref.get(\"name\");\n  };\n\n  if (surveyCreator.current === firebase.auth().currentUser.uid) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Current Survey Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: results && results.map(user => {\n          return /*#__PURE__*/_jsxDEV(DisplayPerson, {\n            name: user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: generatePairs,\n        children: \"Click for Pairs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: pairs && Object.entries(idToName).map(([key, value]) => {\n          return /*#__PURE__*/_jsxDEV(DisplayPair, {\n            user1: key,\n            matches: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: deleteSurvey,\n        children: \"Delete This Survey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this);\n  } else {\n    // only displays results when everything is ready\n    if (displayResults && partnerData !== undefined && Object.keys(partnerData).length !== 0) {\n      console.log(pairs);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(UserDisplayPair, {\n          userData: userData,\n          partnerData: partnerData,\n          db: db,\n          currPoll: currentPoll\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Survey Results Aren't Ready Yet!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          typeof: \"button\",\n          onClick: deleteResponse,\n          children: \"Delete Response\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }, this);\n    }\n  }\n}\n\n_s(SurveyAdmin, \"aRFPDTZSrazSTC2FXGvjKa75hog=\");\n\n_c = SurveyAdmin;\nexport default SurveyAdmin;\n\nvar _c;\n\n$RefreshReg$(_c, \"SurveyAdmin\");","map":{"version":3,"sources":["/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/survey_display/SurveyAdmin.js"],"names":["DisplayPerson","DisplayPair","React","useEffect","useState","useRef","axios","firebase","UserDisplayPair","SurveyAdmin","props","surveyCreator","displayResults","setDisplayResults","title","setTitle","results","setResults","pairs","setPairs","userData","setUserData","partnerData","setPartnerData","idToName","setIDToName","db","firestore","currentPoll","uniqueID","loadInfo","updateDisplayResults","then","currUser","auth","currentUser","uid","console","log","current","collection","doc","get","d","data","partnerList","partDataList","i","length","a","push","generatePairs","allQuestions","orderBy","docs","map","answers","toSend","questions","config","headers","post","response","set","idToNameTemp","key","value","Object","entries","nameKey","getNameFromUserID","nameValue","catch","error","alert","creator","temp","responses","forEach","user","undefined","deleteSurvey","input","prompt","thisSurvey","delete","x","window","location","replace","deleteResponse","userResponseRef","userID","responsesRef","ref","name","keys"],"mappings":"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","sourcesContent":["import DisplayPerson from \"./DisplayPerson\";\nimport DisplayPair from \"./DisplayPair.js\";\nimport React, {useEffect, useState, useRef} from 'react';\nimport axios from \"axios\";\nimport firebase from \"firebase\";\nimport UserDisplayPair from \"./UserDisplayPair\";\n\nfunction SurveyAdmin(props) {\n    const surveyCreator = useRef(null)\n\n    const [displayResults, setDisplayResults] = useState(false);\n    const [title, setTitle] = useState(\"loading...\");\n    const [results, setResults] = useState([])\n    const [pairs, setPairs] = useState({})\n\n    const [userData, setUserData] = useState({});\n    const [partnerData, setPartnerData] = useState([]);\n\n    const [idToName, setIDToName] = useState({});\n\n    const db = firebase.firestore();\n\n    const currentPoll = props.uniqueID;\n\n    // on page load, load in the survey\n    useEffect(() => {\n        loadInfo();\n        updateDisplayResults().then(results => {\n            const currUser = firebase.auth().currentUser.uid;\n            console.log(currUser);\n            console.log(surveyCreator);\n            if (results && currUser !== surveyCreator.current) {\n                // initializes the pairs for users if they're ready\n                db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n                    .doc(\"generatedPairs\").get().then(d => {\n                    let pairs = d.data();\n\n                    let partnerList = pairs.pairs[currUser];\n                    let partDataList = [];\n\n                    for (let i = 0; i < partnerList.length; i++) {\n                        db.collection(\"surveys\").doc(currentPoll).collection(\"responses\")\n                            .doc(partnerList[i]).get().then(a =>\n                            partDataList.push(a.data()));\n                    }\n                    setPartnerData(partDataList);\n\n\n                    db.collection(\"surveys\").doc(currentPoll).collection(\"responses\")\n                        .doc(currUser).get().then(a =>\n                        setUserData(a.data()))\n                })\n            }\n            setDisplayResults(results);\n        })\n    }, [])\n\n\n    const generatePairs = async () => {\n        let allQuestions = (await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get()).docs.map(d => d.data());\n        let answers = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n\n        // assumes that responses array has the index represent question id and value represent which answer\n        // was picked\n        const toSend = {\n            questions: allQuestions,\n            answers: answers\n        };\n\n        console.log(answers);\n\n        let config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Access-Control-Allow-Origin': '*',\n            }\n        };\n\n        axios.post(\n            \"http://localhost:4567/match\",\n            toSend,\n            config\n        ).then(async response =>  {\n            console.log(response.data)\n            setPairs(response.data[\"pairs\"])\n            console.log(response.data[\"pairs\"]);\n\n            await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n                .doc(\"generatedPairs\").set(\n                    {pairs: response.data[\"pairs\"]}\n                )\n\n            let idToNameTemp = {};\n            for (const [key, value] of Object.entries(response.data[\"pairs\"])) {\n                let nameKey = await getNameFromUserID(key);\n                let nameValue = []\n                for (let i = 0; i < value.length; i++) {\n                    nameValue.push(await getNameFromUserID(value[i]));\n                }\n                idToNameTemp[nameKey] = nameValue;\n            }\n\n            console.log(idToNameTemp);\n            setIDToName(idToNameTemp);\n        }).catch(error => {\n            console.log(error);\n            alert(\"Oops, something went wrong.\");\n        });\n    }\n\n    // sets any info needed for survey\n    const loadInfo = async () => {\n        const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n        surveyCreator.current = doc.data().creator; // sets creator --> if current user matches this, display button to get results\n        setTitle(doc.data().title);\n        let temp = []\n        const responses =\n            (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n        responses.forEach(user => {\n            temp.push(user)\n        })\n\n        setResults(temp)\n    }\n\n    const updateDisplayResults = async () => {\n        return await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n            .doc(\"generatedPairs\").get()\n            .then(a => a.get(\"pairs\") !== undefined).catch(error =>\n                console.log(error));\n    }\n\n    const deleteSurvey = () => {\n        let input = prompt(\"Type DELETE to delete this survey.\");\n        if (input === \"DELETE\") {\n            const thisSurvey = db.collection(\"surveys\").doc(currentPoll);\n\n            // apparently this doesn't delete subcollections so welp\n            thisSurvey.delete().then(x => {\n                alert(\"Survey Successfully Deleted!\")\n                window.location.replace(\"http://localhost:3000/Homepage\")\n            });\n        }\n    }\n\n    const deleteResponse = () => {\n        let input = prompt(\"Type DELETE to delete your response to this survey.\");\n        if (input === \"DELETE\") {\n            const userResponseRef = db.collection(\"surveys\").doc(currentPoll).collection(\"responses\")\n                .doc(firebase.auth().currentUser.uid);\n\n            // apparently this doesn't delete subcollections so welp\n            userResponseRef.delete().then(x => {\n                alert(\"Survey Successfully Deleted!\")\n                window.location.replace(\"http://localhost:3000/Homepage\")\n            });\n        }\n    }\n\n    const getNameFromUserID = async (userID) => {\n        console.log(\"Curr ID is: \" + userID);\n        const responsesRef = db.collection(\"surveys\").doc(currentPoll).collection(\"responses\");\n        const ref = (await responsesRef.doc(userID).get());\n        return ref.get(\"name\");\n    }\n\n    if (surveyCreator.current === firebase.auth().currentUser.uid) {\n        return (\n            <div className=\"poll\">\n                <h1>{title}</h1>\n                <button>Current Survey Results</button>\n                <div>\n                    {results && results.map(user => {\n                        return (<DisplayPerson\n                            name={user.name}\n                        />);\n                    })}\n                </div>\n                <button type=\"button\" onClick={generatePairs}>Click for Pairs</button>\n                <div>\n                    {pairs && Object.entries(idToName).map(([key, value]) => {\n                        return (<DisplayPair\n                            user1={key}\n                            matches={value}\n                        />);\n                    })}\n                </div>\n                <button type=\"button\" onClick={deleteSurvey}>Delete This Survey</button>\n            </div>\n        );\n    } else {\n\n        // only displays results when everything is ready\n        if (displayResults && partnerData !== undefined && Object.keys(partnerData).length !== 0) {\n            console.log(pairs)\n            return (\n                <div className=\"poll\">\n                    <h1>{title}</h1>\n\n                    <UserDisplayPair\n                        userData={userData}\n                        partnerData={partnerData}\n                        db={db}\n                        currPoll={currentPoll}\n                    />\n\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"poll\">\n                    <h1>{title}</h1>\n                    <div>\n                        Survey Results Aren't Ready Yet!\n                    </div>\n\n\n                    <button typeof=\"button\" onClick={deleteResponse}>Delete Response</button>\n                </div>\n            );\n        }\n    }\n\n}\n\n\nexport default SurveyAdmin;"]},"metadata":{},"sourceType":"module"}