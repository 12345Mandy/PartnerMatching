{"ast":null,"code":"var _jsxFileName = \"/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/survey_display/ViewOnlySurvey.js\",\n    _s = $RefreshSig$();\n\nimport Option from \"./Option\";\nimport React, { useEffect, useState } from \"react\";\nimport firebase from \"firebase\";\nimport Question from \"./Question\";\nimport { Link } from \"react-router-dom\";\nimport ViewOnlyQuestion from \"./ViewOnlyQuestion\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ViewOnlySurvey(props) {\n  _s();\n\n  const [title, setTitle] = useState(\"loading...\");\n  const [surveyCreator, setCreator] = useState(\"\"); // use this to check if button should show up\n\n  const [description, setDescription] = useState(\"almost there...\");\n  const [questions, setQuestions] = useState([]);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const [error, setError] = useState(\"\");\n  const db = firebase.firestore();\n  useEffect(() => {\n    getSurveyInfoFromDatabase();\n  });\n\n  const getSurveyInfoFromDatabase = async () => {\n    let currentSurveyRef = db.collection(\"surveys\").doc(props.currPoll);\n    setTitle((await currentSurveyRef.get()).data().title);\n    setQuestions((await currentSurveyRef.collection(\"questions\").get()).docs.map(d => d.data())); // setUserAnswers(await )\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"surveyInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), questions.map((q, qid) => /*#__PURE__*/_jsxDEV(ViewOnlyQuestion, {\n        options: q.options,\n        question: q.question,\n        id: qid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 13\n  }, this);\n}\n\n_s(ViewOnlySurvey, \"yrWrbnXtndfunWTE1jTIMEfIgHc=\");\n\n_c = ViewOnlySurvey;\nexport default ViewOnlySurvey;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewOnlySurvey\");","map":{"version":3,"sources":["/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/survey_display/ViewOnlySurvey.js"],"names":["Option","React","useEffect","useState","firebase","Question","Link","ViewOnlyQuestion","ViewOnlySurvey","props","title","setTitle","surveyCreator","setCreator","description","setDescription","questions","setQuestions","userAnswers","setUserAnswers","error","setError","db","firestore","getSurveyInfoFromDatabase","currentSurveyRef","collection","doc","currPoll","get","data","docs","map","d","q","qid","options","question"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AAEA,OAAOC,gBAAP,MAA6B,oBAA7B;;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AAC3B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,YAAD,CAAlC;AACA,QAAM,CAACS,aAAD,EAAgBC,UAAhB,IAA8BV,QAAQ,CAAC,EAAD,CAA5C,CAF2B,CAEuB;;AAClD,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,iBAAD,CAA9C;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACiB,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMmB,EAAE,GAAGlB,QAAQ,CAACmB,SAAT,EAAX;AAEArB,EAAAA,SAAS,CAAC,MAAM;AACZsB,IAAAA,yBAAyB;AAC5B,GAFQ,CAAT;;AAIA,QAAMA,yBAAyB,GAAG,YAAY;AAC1C,QAAIC,gBAAgB,GAAGH,EAAE,CAACI,UAAH,CAAc,SAAd,EAAyBC,GAAzB,CAA6BlB,KAAK,CAACmB,QAAnC,CAAvB;AAEAjB,IAAAA,QAAQ,CAAC,CAAC,MAAMc,gBAAgB,CAACI,GAAjB,EAAP,EAA+BC,IAA/B,GAAsCpB,KAAvC,CAAR;AACAO,IAAAA,YAAY,CAAC,CAAC,MAAMQ,gBAAgB,CAACC,UAAjB,CAA4B,WAA5B,EAAyCG,GAAzC,EAAP,EAAuDE,IAAvD,CAA4DC,GAA5D,CAAgEC,CAAC,IAAIA,CAAC,CAACH,IAAF,EAArE,CAAD,CAAZ,CAJ0C,CAK1C;AACH,GAND;;AAQA,sBAAQ;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,gCACI;AAAA,oBAAKpB;AAAL;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAII;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAKKE,SAAS,CAACgB,GAAV,CAAc,CAACE,CAAD,EAAIC,GAAJ,kBACX,QAAC,gBAAD;AAAkB,QAAA,OAAO,EAAED,CAAC,CAACE,OAA7B;AAAsC,QAAA,QAAQ,EAAEF,CAAC,CAACG,QAAlD;AAA4D,QAAA,EAAE,EAAEF;AAAhE;AAAA;AAAA;AAAA;AAAA,cADH,CALL;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UAAR;AAYH;;GAjCQ3B,c;;KAAAA,c;AAmCT,eAAeA,cAAf","sourcesContent":["import Option from \"./Option\";\nimport React, {useEffect, useState} from \"react\";\nimport firebase from \"firebase\";\nimport Question from \"./Question\";\nimport {Link} from \"react-router-dom\";\n\nimport ViewOnlyQuestion from \"./ViewOnlyQuestion\";\n\nfunction ViewOnlySurvey(props) {\n    const [title, setTitle] = useState(\"loading...\");\n    const [surveyCreator, setCreator] = useState(\"\"); // use this to check if button should show up\n    const [description, setDescription] = useState(\"almost there...\");\n    const [questions, setQuestions] = useState([]);\n    const [userAnswers, setUserAnswers] = useState([]);\n    const [error, setError] = useState(\"\");\n    const db = firebase.firestore();\n\n    useEffect(() => {\n        getSurveyInfoFromDatabase();\n    })\n\n    const getSurveyInfoFromDatabase = async () => {\n        let currentSurveyRef = db.collection(\"surveys\").doc(props.currPoll);\n\n        setTitle((await currentSurveyRef.get()).data().title);\n        setQuestions((await currentSurveyRef.collection(\"questions\").get()).docs.map(d => d.data()));\n        // setUserAnswers(await )\n    }\n\n    return (<div>\n            <div className=\"poll\">\n                <div className=\"surveyInfo\">\n                    <h1>{title}</h1>\n                    <p>{description}</p>\n                </div>\n                {questions.map((q, qid) =>\n                    <ViewOnlyQuestion options={q.options} question={q.question} id={qid}/>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default ViewOnlySurvey;"]},"metadata":{},"sourceType":"module"}