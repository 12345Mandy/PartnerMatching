{"ast":null,"code":"var _jsxFileName = \"/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/Alana_stuff/Survey.js\",\n    _s = $RefreshSig$();\n\nimport Question from \"./Question\";\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport firebase from \"firebase\";\nimport axios from \"axios\";\nimport fire from '../fire';\nimport \"./Survey.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Survey(props) {\n  _s();\n\n  const [title, setTitle] = useState(\"loading...\");\n  const [surveyCreator, setCreator] = useState(\"\"); // use this to check if button should show up\n\n  const [description, setDescription] = useState(\"almost there...\");\n  const [questions, setQuestions] = useState([]);\n  const [userAnswers, setUserAnswers] = useState([]);\n  const db = firebase.firestore();\n  const currentPoll = props.uniqueID; // load in a survey - hardcoded to lab partner survey by default\n\n  const loadSurvey = async () => {\n    const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n    setTitle(doc.data().title);\n    setCreator(doc.data().creator); // sets creator --> if current user matches this, display button to get results\n\n    setDescription(doc.data().description);\n    const ndoc = await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get();\n    await setQuestions(ndoc.docs.map(d => d.data()));\n    let answers = new Array(ndoc.docs.length); // store answer as -1 if user hasn't answered\n\n    console.log(answers.length);\n\n    for (let i = 0; i < answers.length; i++) {\n      answers[i] = -1;\n    }\n\n    setUserAnswers(answers);\n  };\n\n  const sendResults = async () => {\n    // make a new document for submitting\n    // set user ID to be 0 for now\n    await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").add({\n      userID: 0,\n      responses: userAnswers\n    }); // should we add a timestamp?\n\n    console.log(\"submitted!\");\n  }; // on page load, load in the survey\n\n\n  useEffect(() => {\n    loadSurvey();\n  }, []); // set ID, used in child component\n\n  const setAnswerFromChild = (questionID, answer) => {\n    if (userAnswers) {\n      userAnswers[questionID] = answer;\n    }\n  }; // attempt to submit survey\n\n\n  const submitSurvey = () => {\n    //TODO: obtain a user ID and add that to the submission\n    console.log(userAnswers); // make sure each answer isn't null\n\n    let valid = true;\n\n    for (let i = 0; i < userAnswers.length; i++) {\n      if (userAnswers[i] === -1) {\n        valid = false;\n      }\n    } //TODO: prevent user from submitting duplicates\n\n\n    if (valid) {\n      console.log(\"attemp ting to submit...\");\n      sendResults();\n    } else {\n      // TODO: error message\n      console.log(\"you didn't pick answer choices :(\");\n    }\n  };\n\n  const createSurvey = (creator, description, title) => {\n    db.collection(\"surveys\").doc().set({\n      creator: creator,\n      description: description,\n      title: title\n    }).then(() => console.log(\"Created survey!\")).catch(error => {\n      console.error(\"Error making survey: \", error);\n    });\n  }; // checking if user is admin is hard coded in --> will be used to display button for survey results.\n\n\n  if (surveyCreator === firebase.auth().currentUser.uid) {\n    console.log(db.collection(\"surveys\").doc(currentPoll).id);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"surveyInfo\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), questions.map((q, qid) => /*#__PURE__*/_jsxDEV(Question, {\n          options: q.options,\n          question: q.question,\n          id: qid,\n          onSelect: setAnswerFromChild\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: submitSurvey,\n          children: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/ViewResults\",\n        className: \"poll\",\n        children: \"Check Results -- Generate Pairs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }, this);\n  } else {\n    console.log(\"yes\");\n    console.log(surveyCreator);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"surveyInfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), questions.map((q, qid) => /*#__PURE__*/_jsxDEV(Question, {\n        options: q.options,\n        question: q.question,\n        id: qid,\n        onSelect: setAnswerFromChild\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: submitSurvey,\n        children: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(Survey, \"Muv3d10Wj83eu2Wvcped5lftjsc=\");\n\n_c = Survey;\nexport default Survey;\n\nvar _c;\n\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"sources":["/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/Alana_stuff/Survey.js"],"names":["Question","React","useState","useEffect","Link","firebase","axios","fire","Survey","props","title","setTitle","surveyCreator","setCreator","description","setDescription","questions","setQuestions","userAnswers","setUserAnswers","db","firestore","currentPoll","uniqueID","loadSurvey","doc","collection","get","data","creator","ndoc","orderBy","docs","map","d","answers","Array","length","console","log","i","sendResults","add","userID","responses","setAnswerFromChild","questionID","answer","submitSurvey","valid","createSurvey","set","then","catch","error","auth","currentUser","uid","id","q","qid","options","question"],"mappings":"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","sourcesContent":["import Question from \"./Question\";\nimport React, {useState, useEffect} from 'react';\nimport {Link} from 'react-router-dom'\nimport firebase from \"firebase\";\nimport axios from \"axios\";\nimport fire from '../fire'\nimport \"./Survey.css\"\n\nfunction Survey(props) {\n    const [title, setTitle] = useState(\"loading...\");\n    const [surveyCreator, setCreator] = useState(\"\"); // use this to check if button should show up\n    const [description, setDescription] = useState(\"almost there...\");\n    const [questions, setQuestions] = useState([]);\n    const [userAnswers, setUserAnswers] = useState([]);\n\n\n    const db = firebase.firestore();\n    const currentPoll = props.uniqueID;\n\n    // load in a survey - hardcoded to lab partner survey by default\n    const loadSurvey = async () => {\n        const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n        setTitle(doc.data().title);\n        setCreator(doc.data().creator); // sets creator --> if current user matches this, display button to get results\n        setDescription(doc.data().description);\n        const ndoc = await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get();\n        await setQuestions(ndoc.docs.map(d => d.data()));\n        let answers = new Array(ndoc.docs.length);\n        // store answer as -1 if user hasn't answered\n        console.log(answers.length);\n        for (let i = 0; i < answers.length; i++) {\n            answers[i] = -1;\n        }\n        setUserAnswers(answers);\n\n    }\n\n    const sendResults = async () => {\n        // make a new document for submitting\n        // set user ID to be 0 for now\n        await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").add({\n            userID: 0,\n            responses: userAnswers\n        });\n        // should we add a timestamp?\n        console.log(\"submitted!\");\n    }\n\n\n    // on page load, load in the survey\n    useEffect(() => {\n        loadSurvey();\n    }, [])\n\n\n    // set ID, used in child component\n    const setAnswerFromChild = (questionID, answer) => {\n        if (userAnswers) {\n            userAnswers[questionID] = answer;\n        }\n    }\n\n    // attempt to submit survey\n    const submitSurvey = () => {\n        //TODO: obtain a user ID and add that to the submission\n        console.log(userAnswers);\n\n        // make sure each answer isn't null\n        let valid = true;\n        for (let i = 0; i < userAnswers.length; i++) {\n            if (userAnswers[i] === -1) {\n                valid = false;\n            }\n        }\n\n        //TODO: prevent user from submitting duplicates\n\n        if (valid) {\n            console.log(\"attemp ting to submit...\");\n            sendResults();\n        } else {\n            // TODO: error message\n            console.log(\"you didn't pick answer choices :(\");\n        }\n    }\n\n    const createSurvey = (creator, description, title) => {\n        db.collection(\"surveys\").doc().set({\n                creator: creator,\n                description: description,\n                title: title\n            }\n        )\n            .then(() => console.log(\"Created survey!\"))\n            .catch((error) => {\n                console.error(\"Error making survey: \", error);\n            });\n    }\n\n    // checking if user is admin is hard coded in --> will be used to display button for survey results.\n    if (surveyCreator === firebase.auth().currentUser.uid) {\n        console.log(db.collection(\"surveys\").doc(currentPoll).id)\n        return (<div>\n                <div className=\"poll\">\n                    <div className=\"surveyInfo\">\n                        <h1>{title}</h1>\n                        <p>{description}</p>\n                    </div>\n                    {questions.map((q, qid) =>\n                        <Question options={q.options} question={q.question} id={qid} onSelect={setAnswerFromChild}/>\n                    )}\n                    <button type=\"button\" onClick={submitSurvey}>submit</button>\n\n                </div>\n                <Link to=\"/ViewResults\" className=\"poll\">Check Results -- Generate Pairs</Link>\n            </div>\n        )\n    } else {\n        console.log(\"yes\")\n        console.log(surveyCreator)\n        return (\n            <div className=\"poll\">\n                <div className=\"surveyInfo\">\n                    <h1>{title}</h1>\n                    <p>{description}</p>\n                </div>\n                {questions.map((q, qid) =>\n                    <Question options={q.options} question={q.question} id={qid} onSelect={setAnswerFromChild}/>\n                )}\n                <button type=\"button\" onClick={submitSurvey}>submit</button>\n\n            </div>\n        );\n    }\n}\n\nexport default Survey;"]},"metadata":{},"sourceType":"module"}