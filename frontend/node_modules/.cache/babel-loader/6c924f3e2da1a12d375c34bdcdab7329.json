{"ast":null,"code":"var _jsxFileName = \"/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/Alana_stuff/SurveyAdmin.js\",\n    _s = $RefreshSig$();\n\nimport DisplayPerson from \"./DisplayPerson\";\nimport DisplayPair from \"./DisplayPair.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport firebase from \"firebase\";\nimport UserDisplayPair from \"./UserDisplayPair\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SurveyAdmin(props) {\n  _s();\n\n  const [surveyCreator, setCreator] = useState(\"\"); // use this to check if button should show up\n\n  const [displayResults, setDisplayResults] = useState(false);\n  const [title, setTitle] = useState(\"loading...\");\n  const [results, setResults] = useState([]);\n  const [pairs, setPairs] = useState({});\n  const [partnerData, setPartnerData] = useState({});\n  const db = firebase.firestore();\n  const currentPoll = props.uniqueID; // on page load, load in the survey\n\n  useEffect(() => {\n    loadInfo();\n    updateDisplayResults().then(results => {\n      if (results) {\n        // initializes the pairs for users if they're ready\n        db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\").doc(\"generatedPairs\").get().then(d => {\n          let pairs = d.data();\n          console.log(pairs);\n          let partner = pairs.pairs.A;\n          console.log(partner);\n          db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").doc(partner).get().then(a => setPartnerData(a.data()));\n        });\n      }\n\n      setDisplayResults(results);\n    });\n  }, []);\n\n  const generatePairs = async () => {\n    let allQuestions = (await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get()).docs.map(d => d.data());\n    let answers = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data()); // assumes that responses array has the index represent question id and value represent which answer\n    // was picked\n\n    const toSend = {\n      questions: allQuestions,\n      answers: answers\n    };\n    let config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n    axios.post(\"http://localhost:4567/match\", toSend, config).then(response => {\n      console.log(response.data);\n      setPairs(response.data[\"pairs\"]);\n      db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\").doc(\"generatedPairs\").set({\n        pairs: response.data[\"pairs\"]\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }; // sets any info needed for survey\n\n\n  const loadInfo = async () => {\n    const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n    setCreator(doc.data().creator); // sets creator --> if current user matches this, display button to get results\n\n    setTitle(doc.data().title);\n    let temp = [];\n    const responses = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n    responses.forEach(user => {\n      temp.push(user);\n    });\n    setResults(temp);\n  };\n\n  const updateDisplayResults = async () => {\n    return await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\").doc(\"generatedPairs\").get().then(a => a.get(\"pairs\") !== undefined).catch(error => console.log(error));\n  };\n\n  const deleteSurvey = () => {\n    let path = \"/surveys/\" + currentPoll;\n    let deleteFn = firebase.functions().httpsCallable('recursiveDelete');\n    deleteFn({\n      path: path\n    }).then(function (result) {\n      console.log('Delete success: ' + JSON.stringify(result));\n    }).catch(function (err) {\n      console.log('Delete failed, see console,');\n      console.warn(err);\n    });\n  };\n\n  if (surveyCreator === firebase.auth().currentUser.uid) {\n    console.log(\"in admin\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Current Survey Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: results && results.map(user => {\n          return /*#__PURE__*/_jsxDEV(DisplayPerson, {\n            name: user.userID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: generatePairs,\n        children: \"Click for Pairs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: pairs && Object.entries(pairs).map(([key, value]) => {\n          return /*#__PURE__*/_jsxDEV(DisplayPair, {\n            user1: key,\n            user2: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: deleteSurvey,\n        children: \"Delete This Survey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this);\n  } else {\n    // only displays results when everything is ready\n    if (displayResults && partnerData !== undefined && Object.keys(partnerData).length !== 0) {\n      console.log(pairs);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(UserDisplayPair, {\n            partnerData: partnerData,\n            db: db,\n            currPoll: currentPoll\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }, this), \"Survey Results Aren't Ready Yet!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }, this);\n    }\n  }\n}\n\n_s(SurveyAdmin, \"opVsd8QNtyOgxlf1AW1DAjwNXVg=\");\n\n_c = SurveyAdmin;\nexport default SurveyAdmin;\n\nvar _c;\n\n$RefreshReg$(_c, \"SurveyAdmin\");","map":{"version":3,"sources":["/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/Alana_stuff/SurveyAdmin.js"],"names":["DisplayPerson","DisplayPair","React","useEffect","useState","axios","firebase","UserDisplayPair","SurveyAdmin","props","surveyCreator","setCreator","displayResults","setDisplayResults","title","setTitle","results","setResults","pairs","setPairs","partnerData","setPartnerData","db","firestore","currentPoll","uniqueID","loadInfo","updateDisplayResults","then","collection","doc","get","d","data","console","log","partner","A","a","generatePairs","allQuestions","orderBy","docs","map","answers","toSend","questions","config","headers","post","response","set","catch","error","creator","temp","responses","forEach","user","push","undefined","deleteSurvey","path","deleteFn","functions","httpsCallable","result","JSON","stringify","err","warn","auth","currentUser","uid","userID","Object","entries","key","value","keys","length"],"mappings":"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","sourcesContent":["import DisplayPerson from \"./DisplayPerson\";\nimport DisplayPair from \"./DisplayPair.js\";\nimport React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport firebase from \"firebase\";\nimport UserDisplayPair from \"./UserDisplayPair\";\n\nfunction SurveyAdmin(props) {\n\n    const [surveyCreator, setCreator] = useState(\"\"); // use this to check if button should show up\n\n    const [displayResults, setDisplayResults] = useState(false);\n    const [title, setTitle] = useState(\"loading...\");\n    const [results, setResults] = useState([])\n    const [pairs, setPairs] = useState({})\n    const [partnerData, setPartnerData] = useState({});\n\n    const db = firebase.firestore();\n\n    const currentPoll = props.uniqueID;\n\n    // on page load, load in the survey\n    useEffect(() => {\n        loadInfo();\n        updateDisplayResults().then(results => {\n            if (results) {\n                // initializes the pairs for users if they're ready\n                db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n                    .doc(\"generatedPairs\").get().then(d => {\n                        let pairs = d.data();\n                        console.log(pairs)\n                        let partner = pairs.pairs.A;\n                        console.log(partner);\n\n                    db.collection(\"surveys\").doc(currentPoll).collection(\"responses\")\n                        .doc(partner).get().then(a =>\n                            setPartnerData(a.data()));\n                })\n            }\n            setDisplayResults(results);\n        })\n    }, [])\n\n\n    const generatePairs = async () => {\n        let allQuestions = (await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get()).docs.map(d => d.data());\n        let answers = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n\n        // assumes that responses array has the index represent question id and value represent which answer\n        // was picked\n        const toSend = {\n            questions: allQuestions,\n            answers: answers\n        };\n\n        let config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Access-Control-Allow-Origin': '*',\n            }\n        };\n\n        axios.post(\n            \"http://localhost:4567/match\",\n            toSend,\n            config\n        ).then(response => {\n            console.log(response.data)\n            setPairs(response.data[\"pairs\"])\n\n            db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n                .doc(\"generatedPairs\").set(\n                {pairs: response.data[\"pairs\"]}\n            )\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    // sets any info needed for survey\n    const loadInfo = async () => {\n        const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n        setCreator(doc.data().creator); // sets creator --> if current user matches this, display button to get results\n        setTitle(doc.data().title);\n        let temp = []\n        const responses =\n            (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n        responses.forEach(user => {\n            temp.push(user)\n        })\n\n        setResults(temp)\n    }\n\n    const updateDisplayResults = async () => {\n        return await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n            .doc(\"generatedPairs\").get()\n            .then(a => a.get(\"pairs\") !== undefined).catch(error =>\n                console.log(error));\n    }\n\n    const deleteSurvey = () => {\n        let path = \"/surveys/\" + currentPoll;\n\n        let deleteFn = firebase.functions().httpsCallable('recursiveDelete');\n        deleteFn({ path: path })\n            .then(function(result) {\n                console.log('Delete success: ' + JSON.stringify(result));\n            })\n            .catch(function(err) {\n                console.log('Delete failed, see console,');\n                console.warn(err);\n            });\n    }\n\n    if (surveyCreator === firebase.auth().currentUser.uid) {\n        console.log(\"in admin\");\n        return (\n            <div className=\"poll\">\n                <h1>{title}</h1>\n                <button>Current Survey Results</button>\n                <div>\n                    {results && results.map(user => {\n                        return (<DisplayPerson\n                            name={user.userID}\n                        />);\n                    })}\n                </div>\n                <button type=\"button\" onClick={generatePairs}>Click for Pairs</button>\n                <div>\n                    {pairs && Object.entries(pairs).map(([key, value]) => {\n                        return (<DisplayPair\n                            user1={key}\n                            user2={value}\n                        />);\n                    })}\n                </div>\n                <button type=\"button\" onClick={deleteSurvey}>Delete This Survey</button>\n            </div>\n        );\n    } else {\n\n        // only displays results when everything is ready\n        if (displayResults && partnerData !== undefined && Object.keys(partnerData).length !== 0) {\n            console.log(pairs)\n            return (\n                <div className=\"poll\">\n                    <h1>{title}</h1>\n                    <div>\n                        <UserDisplayPair\n                            partnerData={partnerData}\n                            db={db}\n                            currPoll={currentPoll}\n                        />\n                    </div>\n\n                </div>\n        );\n        } else\n            {\n                return (\n                    <div className=\"poll\">\n                        <h1>{title}</h1>\n                        Survey Results Aren't Ready Yet!\n                    </div>\n                );\n            }\n        }\n\n        }\n\n\n        export default SurveyAdmin;"]},"metadata":{},"sourceType":"module"}