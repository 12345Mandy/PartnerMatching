{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17738\\\\Desktop\\\\cs0320\\\\term-project-awhite35-mcamach6-mhe26-pmontei1\\\\frontend\\\\src\\\\Alana_stuff\\\\SurveyAdmin.js\",\n    _s = $RefreshSig$();\n\nimport Option from \"./Option\";\nimport DisplayPerson from \"./DisplayPerson\";\nimport DisplayPair from \"./DisplayPair.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from \"axios\";\nimport firebase from \"firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SurveyAdmin(props) {\n  _s();\n\n  const [surveyCreator, setCreator] = useState(\"\"); // use this to check if button should show up\n\n  const [title, setTitle] = useState(\"loading...\");\n  const [results, setResults] = useState([]);\n  const [pairs, setPairs] = useState([]);\n  const db = firebase.firestore(); // EDIT THIS DEPENDING ON WHAT SURVEY IS NEEDED.\n\n  const currentPoll = props.uniqueID; // on page load, load in the survey\n\n  useEffect(() => {\n    loadInfo();\n  }, []);\n\n  const generatePairs = async () => {\n    let allQuestions = (await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get()).docs.map(d => d.data());\n    let answers = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data()); // assumes that responses array has the index represent question id and value represent which answer\n    // was picked\n\n    const toSend = {\n      questions: allQuestions,\n      answers: answers\n    };\n    let config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n    axios.post(\"http://localhost:4567/match\", toSend, config).then(response => {\n      console.log(response.data);\n      setPairs(response.data.pairs);\n      db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\").doc(\"generatedPairs\").set({\n        pairs: response.data.pairs\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }; // sets any info needed for survey\n\n\n  const loadInfo = async () => {\n    const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n    setCreator(doc.data().creator); // sets creator --> if current user matches this, display button to get results\n\n    setTitle(doc.data().title);\n    let temp = [];\n    const responses = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n    responses.forEach(user => {\n      temp.push(user);\n    });\n    setResults(temp);\n  };\n\n  if (surveyCreator === firebase.auth().currentUser.uid) {\n    console.log(\"in admin\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Current Survey Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: results && results.map(user => {\n          return /*#__PURE__*/_jsxDEV(DisplayPerson, {\n            name: user.userID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: generatePairs,\n        children: \"Click for Pairs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: pairs && Object.entries(pairs).map(([key, value]) => {\n          return /*#__PURE__*/_jsxDEV(DisplayPair, {\n            user1: key,\n            user2: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this);\n  } else {\n    // console.log(pairs)\n    // const getPairs = async () => {\n    //     let pairs = await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n    //         .doc(\"generatedPairs\").get().then(snap =>snap.data())\n    //    console.log(pairs[0])\n    // }\n    // getPairs()\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll\",\n      children: \"ur not admin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(SurveyAdmin, \"bF+a1fq2a/ou/VBYcNsuoWCPU9Q=\");\n\n_c = SurveyAdmin;\nexport default SurveyAdmin;\n\nvar _c;\n\n$RefreshReg$(_c, \"SurveyAdmin\");","map":{"version":3,"sources":["C:/Users/17738/Desktop/cs0320/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/Alana_stuff/SurveyAdmin.js"],"names":["Option","DisplayPerson","DisplayPair","React","useState","useEffect","useRef","axios","firebase","SurveyAdmin","props","surveyCreator","setCreator","title","setTitle","results","setResults","pairs","setPairs","db","firestore","currentPoll","uniqueID","loadInfo","generatePairs","allQuestions","collection","doc","orderBy","get","docs","map","d","data","answers","toSend","questions","config","headers","post","then","response","console","log","set","catch","error","creator","temp","responses","forEach","user","push","auth","currentUser","uid","userID","Object","entries","key","value"],"mappings":"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","sourcesContent":["\r\nimport Option from \"./Option\";\r\nimport DisplayPerson from \"./DisplayPerson\";\r\nimport DisplayPair from \"./DisplayPair.js\";\r\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport axios from \"axios\";\r\nimport firebase from \"firebase\";\r\n\r\nfunction SurveyAdmin(props) {\r\n    const [surveyCreator, setCreator] = useState(\"\"); // use this to check if button should show up\r\n\r\n    const [title, setTitle] = useState(\"loading...\");\r\n    const [results, setResults] = useState([])\r\n    const [pairs, setPairs] = useState([])\r\n    const db = firebase.firestore();\r\n    // EDIT THIS DEPENDING ON WHAT SURVEY IS NEEDED.\r\n    const currentPoll = props.uniqueID;\r\n\r\n    // on page load, load in the survey\r\n    useEffect(() => {\r\n        loadInfo();\r\n    }, [])\r\n\r\n    const generatePairs = async () => {\r\n        let allQuestions = (await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get()).docs.map(d => d.data());\r\n        let answers = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\r\n\r\n        // assumes that responses array has the index represent question id and value represent which answer\r\n        // was picked\r\n        const toSend = {\r\n            questions: allQuestions,\r\n            answers: answers\r\n        };\r\n\r\n        let config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                'Access-Control-Allow-Origin': '*',\r\n            }\r\n        };\r\n\r\n        axios.post(\r\n            \"http://localhost:4567/match\",\r\n            toSend,\r\n            config\r\n        ).then(response => {\r\n            console.log(response.data)\r\n            setPairs(response.data.pairs)\r\n\r\n            db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\r\n                .doc(\"generatedPairs\").set(\r\n\r\n                {pairs: response.data.pairs}\r\n            )\r\n        }).catch(error => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    // sets any info needed for survey\r\n    const loadInfo = async () => {\r\n        const doc = await db.collection(\"surveys\").doc(currentPoll).get();\r\n        setCreator(doc.data().creator); // sets creator --> if current user matches this, display button to get results\r\n        setTitle(doc.data().title);\r\n        let temp = []\r\n        const responses =\r\n            (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\r\n        responses.forEach(user => {\r\n            temp.push(user)\r\n        })\r\n        setResults(temp)\r\n    }\r\n\r\n\r\n    if (surveyCreator === firebase.auth().currentUser.uid) {\r\n        console.log(\"in admin\");\r\n        return (\r\n            <div className=\"poll\">\r\n                <h1>{title}</h1>\r\n                <button>Current Survey Results</button>\r\n                <div>\r\n                    {results && results.map(user => {\r\n                        return (<DisplayPerson\r\n                            name={user.userID}\r\n                        />);\r\n                    })}\r\n                </div>\r\n                <button type=\"button\" onClick={generatePairs}>Click for Pairs</button>\r\n                <div>\r\n                    {pairs && Object.entries(pairs).map(([key, value]) => {\r\n                        return (<DisplayPair\r\n                            user1={key}\r\n                            user2={value}\r\n                        />);\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        // console.log(pairs)\r\n        // const getPairs = async () => {\r\n        //     let pairs = await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\r\n        //         .doc(\"generatedPairs\").get().then(snap =>snap.data())\r\n        //    console.log(pairs[0])\r\n        // }\r\n        // getPairs()\r\n        return (\r\n            <div className=\"poll\">\r\n                {/*<h1>{title}</h1>*/}\r\n                {/*<button>Your Current Pair</button>*/}\r\n                {/*<div>*/}\r\n                {/*    { db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")*/}\r\n                {/*        .doc(\"generatedPairs\").get().then(snap => snap.exists) &&*/}\r\n\r\n                {/*        <div>*/}\r\n                {/*            You have been paired with:*/}\r\n                {/*            pairs[0]*/}\r\n\r\n                {/*        </div>*/}\r\n                {/*    }*/}\r\n\r\n                {/*</div>*/}\r\n                ur not admin\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default SurveyAdmin;"]},"metadata":{},"sourceType":"module"}