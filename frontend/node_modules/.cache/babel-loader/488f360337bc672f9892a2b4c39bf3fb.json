{"ast":null,"code":"var _jsxFileName = \"/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/Alana_stuff/Survey.js\",\n    _s = $RefreshSig$();\n\nimport Question from \"./Question\";\nimport React, { useState, useEffect } from 'react';\nimport { firestore } from \"firebase\";\nimport firebase from \"firebase\";\nimport axios from \"axios\";\nimport fire from '../fire';\nimport Option from \"./Option\"; // const firebaseConfig = {\n//     apiKey: \"AIzaSyAivvKyzEqMpc5Z8X2eZnUFkWcyCoSFS54\",\n//     authDomain: \"survey-creator-cs32.firebaseapp.com\",\n//     projectId: \"survey-creator-cs32\",\n//     name: \"survey\"\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Survey() {\n  _s();\n\n  const [title, setTitle] = useState(\"loading...\");\n  const [description, setDescription] = useState(\"almost there...\");\n  const [questions, setQuestions] = useState([]);\n  const [userAnswers, setUserAnswers] = useState([]); // firebase.initializeApp(firebaseConfig);\n  // if(!firebase.apps.length) {\n  //     firebase.initializeApp(firebaseConfig);\n  // } else {\n  //     firebase.app();\n  // }\n\n  const db = firebase.firestore();\n  const currentPoll = \"labpartners\"; // load in a survey - hardcoded to lab partner survey by default\n\n  const loadSurvey = async () => {\n    const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n    setTitle(doc.data().title);\n    setDescription(doc.data().description);\n    const ndoc = await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get();\n    await setQuestions(ndoc.docs.map(d => d.data()));\n    let answers = new Array(ndoc.docs.length); // store answer as -1 if user hasn't answered\n\n    console.log(answers.length);\n\n    for (let i = 0; i < answers.length; i++) {\n      answers[i] = -1;\n    }\n\n    setUserAnswers(answers);\n  };\n\n  const sendResults = async () => {\n    // make a new document for submitting\n    // set user ID to be 0 for now\n    // add doc to answers collection (need to figure out how to do if not exist stuff to make a responses collection in future)\n    await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").add({\n      userID: 0,\n      responses: userAnswers\n    }); // should we add a timestamp?\n\n    console.log(\"submitted!\");\n  }; // on page load, load in the survey\n\n\n  useEffect(() => {\n    loadSurvey();\n  }, []); // set ID, used in child component\n\n  const setAnswerFromChild = (questionID, answer) => {\n    if (userAnswers) {\n      userAnswers[questionID] = answer;\n    }\n  }; // attempt to submit survey\n\n\n  const submitSurvey = () => {\n    //TODO: obtain a user ID and add that to the submission\n    console.log(userAnswers); // make sure each answer isn't null\n\n    let valid = true;\n\n    for (let i = 0; i < userAnswers.length; i++) {\n      if (userAnswers[i] === -1) {\n        valid = false;\n      }\n    } //TODO: prevent user from submitting duplicates\n\n\n    if (valid) {\n      console.log(\"attemp ting to submit...\");\n      sendResults();\n    } else {\n      // TODO: error message\n      console.log(\"you didn't pick answer choices :(\");\n    }\n  };\n\n  const generatePairs = () => {\n    const toSend = {\n      questions: questions,\n      user_answers: userAnswers\n    };\n    let config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n    axios.post(\"http://localhost:4567/matches\", toSend, config).then(response => {\n      console.log(typeof userAnswers);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"poll\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: generatePairs,\n      children: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), questions.map((q, qid) => /*#__PURE__*/_jsxDEV(Question, {\n      options: q.options,\n      question: q.question,\n      id: qid,\n      onSelect: setAnswerFromChild\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: submitSurvey,\n      children: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Survey, \"ObpY5z670nvIXcHRIIs8fWMLqus=\");\n\n_c = Survey;\nexport default Survey;\n\nvar _c;\n\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"sources":["/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/Alana_stuff/Survey.js"],"names":["Question","React","useState","useEffect","firestore","firebase","axios","fire","Option","Survey","title","setTitle","description","setDescription","questions","setQuestions","userAnswers","setUserAnswers","db","currentPoll","loadSurvey","doc","collection","get","data","ndoc","orderBy","docs","map","d","answers","Array","length","console","log","i","sendResults","add","userID","responses","setAnswerFromChild","questionID","answer","submitSurvey","valid","generatePairs","toSend","user_answers","config","headers","post","then","response","catch","error","q","qid","options","question"],"mappings":"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","sourcesContent":["import Question from \"./Question\";\nimport React, {useState, useEffect} from 'react';\nimport {firestore} from \"firebase\";\nimport firebase from \"firebase\";\nimport axios from \"axios\";\nimport fire from '../fire'\nimport Option from \"./Option\";\n\n// const firebaseConfig = {\n//     apiKey: \"AIzaSyAivvKyzEqMpc5Z8X2eZnUFkWcyCoSFS54\",\n//     authDomain: \"survey-creator-cs32.firebaseapp.com\",\n//     projectId: \"survey-creator-cs32\",\n//     name: \"survey\"\n// };\n\nfunction Survey() {\n    const [title, setTitle] = useState(\"loading...\");\n    const [description, setDescription] = useState(\"almost there...\");\n    const [questions, setQuestions] = useState([]);\n    const [userAnswers, setUserAnswers] = useState([]);\n\n    // firebase.initializeApp(firebaseConfig);\n    // if(!firebase.apps.length) {\n    //     firebase.initializeApp(firebaseConfig);\n    // } else {\n    //     firebase.app();\n    // }\n\n\n    const db = firebase.firestore();\n    const currentPoll = \"labpartners\";\n\n    // load in a survey - hardcoded to lab partner survey by default\n    const loadSurvey = async () => {\n        const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n        setTitle(doc.data().title);\n        setDescription(doc.data().description);\n        const ndoc = await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get();\n        await setQuestions(ndoc.docs.map(d => d.data()));\n        let answers = new Array(ndoc.docs.length);\n        // store answer as -1 if user hasn't answered\n        console.log(answers.length);\n        for (let i = 0; i < answers.length; i++) {\n            answers[i] = -1;\n        }\n        setUserAnswers(answers);\n\n    }\n\n    const sendResults = async () => {\n        // make a new document for submitting\n        // set user ID to be 0 for now\n        // add doc to answers collection (need to figure out how to do if not exist stuff to make a responses collection in future)\n        await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").add({\n            userID: 0,\n            responses: userAnswers\n        });\n        // should we add a timestamp?\n        console.log(\"submitted!\");\n    }\n\n\n    // on page load, load in the survey\n    useEffect(() => {\n        loadSurvey();\n    }, [])\n\n\n    // set ID, used in child component\n    const setAnswerFromChild = (questionID, answer) => {\n        if (userAnswers) {\n            userAnswers[questionID] = answer;\n        }\n    }\n\n    // attempt to submit survey\n    const submitSurvey = () => {\n        //TODO: obtain a user ID and add that to the submission\n        console.log(userAnswers);\n\n        // make sure each answer isn't null\n        let valid = true;\n        for (let i = 0; i < userAnswers.length; i++) {\n            if (userAnswers[i] === -1) {\n                valid = false;\n            }\n        }\n\n        //TODO: prevent user from submitting duplicates\n\n        if (valid) {\n            console.log(\"attemp ting to submit...\");\n            sendResults();\n        } else {\n            // TODO: error message\n            console.log(\"you didn't pick answer choices :(\");\n        }\n    }\n\n    const generatePairs = () => {\n        const toSend = {\n            questions: questions,\n            user_answers: userAnswers\n        };\n\n        let config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Access-Control-Allow-Origin': '*',\n            }\n        };\n\n        axios.post(\n            \"http://localhost:4567/matches\",\n            toSend,\n            config\n        ).then(response => {\n            console.log(typeof userAnswers)\n\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    return (\n        <div className=\"poll\">\n            <button type=\"button\" onClick={generatePairs}>submit</button>\n            <h1>{title}</h1>\n            <br/>\n            <p>{description}</p>\n            {questions.map((q, qid) =>\n                <Question options={q.options} question={q.question} id={qid} onSelect={setAnswerFromChild}/>\n            )}\n            <button type=\"button\" onClick={submitSurvey}>submit</button>\n        </div>\n    );\n}\n\nexport default Survey;"]},"metadata":{},"sourceType":"module"}