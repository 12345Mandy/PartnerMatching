{"ast":null,"code":"var _jsxFileName = \"/Users/mandyhe/Grind_Web_Dev/short_React_Firebase_login/login copy 2/src/Alana_stuff/Survey.js\",\n    _s = $RefreshSig$();\n\nimport Question from \"./Question\";\nimport React, { useState, useEffect } from 'react';\nimport { firestore } from \"firebase\";\nimport firebase from \"firebase\";\nimport fire from '../fire';\nimport Option from \"./Option\"; // const firebaseConfig = {\n//     apiKey: \"AIzaSyAivvKyzEqMpc5Z8X2eZnUFkWcyCoSFS54\",\n//     authDomain: \"survey-creator-cs32.firebaseapp.com\",\n//     projectId: \"survey-creator-cs32\",\n//     name: \"survey\"\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Survey() {\n  _s();\n\n  const [title, setTitle] = useState(\"loading...\");\n  const [description, setDescription] = useState(\"almost there...\");\n  const [questions, setQuestions] = useState([]);\n  const [userAnswers, setUserAnswers] = useState([]); // firebase.initializeApp(firebaseConfig);\n  // if(!firebase.apps.length) {\n  //     firebase.initializeApp(firebaseConfig);\n  // } else {\n  //     firebase.app();\n  // }\n\n  fire;\n  const db = firebase.firestore();\n  const currentPoll = \"labpartners\"; // load in a survey - hardcoded to lab partner survey by default\n\n  const loadSurvey = async () => {\n    const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n    setTitle(doc.data().title);\n    setDescription(doc.data().description);\n    const ndoc = await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get();\n    await setQuestions(ndoc.docs.map(d => d.data()));\n    let answers = new Array(ndoc.docs.length); // store answer as -1 if user hasn't answered\n\n    console.log(answers.length);\n\n    for (let i = 0; i < answers.length; i++) {\n      answers[i] = -1;\n    }\n\n    setUserAnswers(answers);\n  };\n\n  const sendResults = async () => {\n    // make a new document for submitting\n    // set user ID to be 0 for now\n    // add doc to answers collection (need to figure out how to do if not exist stuff to make a responses collection in future)\n    await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").add({\n      userID: 0,\n      responses: userAnswers\n    }); // should we add a timestamp?\n\n    console.log(\"submitted!\");\n  }; // on page load, load in the survey\n\n\n  useEffect(() => {\n    loadSurvey();\n  }, []); // set ID, used in child component\n\n  const setAnswerFromChild = (questionID, answer) => {\n    if (userAnswers) {\n      userAnswers[questionID] = answer;\n    }\n  }; // attempt to submit survey\n\n\n  const submitSurvey = () => {\n    //TODO: obtain a user ID and add that to the submission\n    console.log(userAnswers); // make sure each answer isn't null\n\n    let valid = true;\n\n    for (let i = 0; i < userAnswers.length; i++) {\n      if (userAnswers[i] == -1) {\n        valid = false;\n      }\n    } //TODO: prevent user from submitting duplicates\n\n\n    if (valid) {\n      console.log(\"attemp ting to submit...\");\n      sendResults();\n    } else {\n      // TODO: error message\n      console.log(\"you didn't pick answer choices :(\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"poll\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), questions.map((q, qid) => /*#__PURE__*/_jsxDEV(Question, {\n      options: q.options,\n      question: q.question,\n      id: qid,\n      onSelect: setAnswerFromChild\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: submitSurvey,\n      children: \"submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Survey, \"ObpY5z670nvIXcHRIIs8fWMLqus=\");\n\n_c = Survey;\nexport default Survey;\n\nvar _c;\n\n$RefreshReg$(_c, \"Survey\");","map":{"version":3,"sources":["/Users/mandyhe/Grind_Web_Dev/short_React_Firebase_login/login copy 2/src/Alana_stuff/Survey.js"],"names":["Question","React","useState","useEffect","firestore","firebase","fire","Option","Survey","title","setTitle","description","setDescription","questions","setQuestions","userAnswers","setUserAnswers","db","currentPoll","loadSurvey","doc","collection","get","data","ndoc","orderBy","docs","map","d","answers","Array","length","console","log","i","sendResults","add","userID","responses","setAnswerFromChild","questionID","answer","submitSurvey","valid","q","qid","options","question"],"mappings":"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","sourcesContent":["import Question from \"./Question\";\nimport React, {useState, useEffect} from 'react';\nimport { firestore } from \"firebase\";\nimport firebase from \"firebase\";\nimport fire from '../fire'\nimport Option from \"./Option\";\n\n// const firebaseConfig = {\n//     apiKey: \"AIzaSyAivvKyzEqMpc5Z8X2eZnUFkWcyCoSFS54\",\n//     authDomain: \"survey-creator-cs32.firebaseapp.com\",\n//     projectId: \"survey-creator-cs32\",\n//     name: \"survey\"\n// };\n\nfunction Survey() {\n    const [title, setTitle] = useState(\"loading...\");\n    const [description, setDescription] = useState(\"almost there...\");\n    const [questions, setQuestions] = useState([]);\n    const [userAnswers, setUserAnswers] = useState([]);\n\n    // firebase.initializeApp(firebaseConfig);\n    // if(!firebase.apps.length) {\n    //     firebase.initializeApp(firebaseConfig);\n    // } else {\n    //     firebase.app();\n    // }\n\n    fire;\n\n    const db = firebase.firestore();\n    const currentPoll = \"labpartners\";\n\n    // load in a survey - hardcoded to lab partner survey by default\n    const loadSurvey = async () => {\n        const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n        setTitle(doc.data().title);\n        setDescription(doc.data().description);\n        const ndoc = await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get();\n        await setQuestions(ndoc.docs.map(d => d.data()));\n        let answers = new Array(ndoc.docs.length);\n        // store answer as -1 if user hasn't answered\n        console.log(answers.length);\n        for(let i = 0; i < answers.length; i++) {\n            answers[i] = -1;\n        }\n        setUserAnswers(answers);\n\n    }\n\n    const sendResults = async () => {\n        // make a new document for submitting\n        // set user ID to be 0 for now\n        // add doc to answers collection (need to figure out how to do if not exist stuff to make a responses collection in future)\n        await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").add({\n            userID : 0,\n            responses : userAnswers\n        });\n        // should we add a timestamp?\n        console.log(\"submitted!\");\n\n\n    }\n\n    // on page load, load in the survey\n    useEffect( () => {\n        loadSurvey();\n    }, [])\n\n\n\n    // set ID, used in child component\n    const setAnswerFromChild = (questionID, answer) => {\n        if(userAnswers) {\n            userAnswers[questionID] = answer;\n        }\n    }\n\n    // attempt to submit survey\n    const submitSurvey = () => {\n        //TODO: obtain a user ID and add that to the submission\n        console.log(userAnswers);\n\n        // make sure each answer isn't null\n        let valid = true;\n        for(let i = 0; i < userAnswers.length; i++) {\n            if(userAnswers[i] == -1) {\n                valid = false;\n            }\n        }\n\n        //TODO: prevent user from submitting duplicates\n\n        if(valid) {\n            console.log(\"attemp ting to submit...\");\n            sendResults();\n        } else {\n            // TODO: error message\n            console.log(\"you didn't pick answer choices :(\");\n        }\n    }\n\n\n    return (\n        <div className=\"poll\" >\n            <h1>{title}</h1>\n            <br/>\n            <p>{description}</p>\n            {questions.map((q, qid) =>\n                <Question options={q.options} question = {q.question} id={qid} onSelect={setAnswerFromChild}/>\n            )}\n            <button type=\"button\" onClick={submitSurvey}>submit</button>\n        </div>\n    );\n}\n\nexport default Survey;"]},"metadata":{},"sourceType":"module"}