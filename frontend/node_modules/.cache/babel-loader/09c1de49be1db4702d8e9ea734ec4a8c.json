{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17738\\\\Desktop\\\\cs0320\\\\term-project-awhite35-mcamach6-mhe26-pmontei1\\\\frontend\\\\src\\\\Alana_stuff\\\\SurveyAdmin.js\",\n    _s = $RefreshSig$();\n\nimport Option from \"./Option\";\nimport DisplayPerson from \"./DisplayPerson\";\nimport DisplayPair from \"./DisplayPair.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from \"axios\";\nimport firebase from \"firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SurveyAdmin(props) {\n  _s();\n\n  const [title, setTitle] = useState(\"loading...\");\n  const [results, setResults] = useState([]);\n  const [pairs, setPairs] = useState([]);\n  const db = firebase.firestore(); // EDIT THIS DEPENDING ON WHAT SURVEY IS NEEDED.\n\n  const currentPoll = \"labpartners\"; // on page load, load in the survey\n\n  useEffect(() => {\n    loadInfo();\n  }, []);\n\n  const generatePairs = async () => {\n    let allQuestions = (await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get()).docs.map(d => d.data());\n    let answers = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data()); // assumes that responses array has the index represent question id and value represent which answer\n    // was picked\n\n    const toSend = {\n      questions: allQuestions,\n      answers: answers\n    };\n    let config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n    axios.post(\"http://localhost:4567/match\", toSend, config).then(response => {\n      console.log(response.data);\n      setPairs(response.data.pairs);\n      Object.entries(response.data.pairs).map(([key, value]) => {\n        console.log(key);\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }; // sets any info needed for survey\n\n\n  const loadInfo = async () => {\n    const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n    setTitle(doc.data().title);\n    let temp = [];\n    const responses = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n    responses.forEach(user => {\n      temp.push(user);\n    });\n    setResults(temp);\n    console.log(temp);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"poll\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Current Survey Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: results && results.map(user => {\n        return /*#__PURE__*/_jsxDEV(DisplayPerson, {\n          name: user.userID\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: generatePairs,\n      children: \"Click for Pairs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: pairs && Object.entries(pairs).map(([key, value]) => {\n        return /*#__PURE__*/_jsxDEV(DisplayPair, {\n          user1: key,\n          user2: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n\n_s(SurveyAdmin, \"fFqy2sk27UzpgiBiWYHAg7oKWd4=\");\n\n_c = SurveyAdmin;\nexport default SurveyAdmin;\n\nvar _c;\n\n$RefreshReg$(_c, \"SurveyAdmin\");","map":{"version":3,"sources":["C:/Users/17738/Desktop/cs0320/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/Alana_stuff/SurveyAdmin.js"],"names":["Option","DisplayPerson","DisplayPair","React","useState","useEffect","useRef","axios","firebase","SurveyAdmin","props","title","setTitle","results","setResults","pairs","setPairs","db","firestore","currentPoll","loadInfo","generatePairs","allQuestions","collection","doc","orderBy","get","docs","map","d","data","answers","toSend","questions","config","headers","post","then","response","console","log","Object","entries","key","value","catch","error","temp","responses","forEach","user","push","userID"],"mappings":"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","sourcesContent":["import Option from \"./Option\";\r\nimport DisplayPerson from \"./DisplayPerson\";\r\nimport DisplayPair from \"./DisplayPair.js\";\r\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport axios from \"axios\";\r\nimport firebase from \"firebase\";\r\n\r\nfunction SurveyAdmin(props) {\r\n\r\n    const [title, setTitle] = useState(\"loading...\");\r\n    const [results, setResults] = useState([])\r\n    const [pairs, setPairs] = useState([])\r\n    const db = firebase.firestore();\r\n    // EDIT THIS DEPENDING ON WHAT SURVEY IS NEEDED.\r\n    const currentPoll = \"labpartners\";\r\n\r\n    // on page load, load in the survey\r\n    useEffect(() => {\r\n        loadInfo();\r\n    }, [])\r\n\r\n    const generatePairs = async () => {\r\n        let allQuestions = (await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get()).docs.map(d => d.data());\r\n        let answers = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\r\n\r\n        // assumes that responses array has the index represent question id and value represent which answer\r\n        // was picked\r\n        const toSend = {\r\n            questions: allQuestions,\r\n            answers: answers\r\n        };\r\n\r\n        let config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                'Access-Control-Allow-Origin': '*',\r\n            }\r\n        };\r\n\r\n        axios.post(\r\n            \"http://localhost:4567/match\",\r\n            toSend,\r\n            config\r\n        ).then(response => {\r\n            console.log(response.data)\r\n            setPairs(response.data.pairs)\r\n            Object.entries(response.data.pairs).map(([key, value]) => {\r\n                console.log(key)\r\n            })\r\n        }).catch(error => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    // sets any info needed for survey\r\n    const loadInfo = async () => {\r\n        const doc = await db.collection(\"surveys\").doc(currentPoll).get();\r\n        setTitle(doc.data().title);\r\n        let temp = []\r\n        const responses =\r\n            (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\r\n        responses.forEach(user => {\r\n            temp.push(user)\r\n        })\r\n        setResults(temp)\r\n        console.log(temp)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"poll\">\r\n            <h1>{title}</h1>\r\n            <button>Current Survey Results</button>\r\n            <div>\r\n                {results && results.map(user => {\r\n                    return( <DisplayPerson\r\n                        name={user.userID}\r\n                    />);\r\n                })}\r\n            </div>\r\n            <button type=\"button\" onClick={generatePairs}>Click for Pairs</button>\r\n            <div>\r\n                {pairs && Object.entries(pairs).map(([key, value]) => {\r\n                    return( <DisplayPair\r\n                        user1={key}\r\n                        user2={value}\r\n                    />);\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default SurveyAdmin;"]},"metadata":{},"sourceType":"module"}