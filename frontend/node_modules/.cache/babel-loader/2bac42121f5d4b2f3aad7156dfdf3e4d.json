{"ast":null,"code":"var _jsxFileName = \"/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/survey_display/SurveyAdmin.js\",\n    _s = $RefreshSig$();\n\nimport DisplayPerson from \"./DisplayPerson\";\nimport DisplayPair from \"./DisplayPair.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport firebase from \"firebase\";\nimport UserDisplayPair from \"./UserDisplayPair\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SurveyAdmin(props) {\n  _s();\n\n  const [surveyCreator, setCreator] = useState(\"\"); // use this to check if button should show up\n\n  const [displayResults, setDisplayResults] = useState(false);\n  const [title, setTitle] = useState(\"loading...\");\n  const [results, setResults] = useState([]);\n  const [pairs, setPairs] = useState({});\n  const [userData, setUserData] = useState({});\n  const [partnerData, setPartnerData] = useState({});\n  const [idToName, setIDToName] = useState({});\n  const db = firebase.firestore();\n  const currentPoll = props.uniqueID; // on page load, load in the survey\n\n  useEffect(() => {\n    loadInfo();\n    updateDisplayResults().then(results => {\n      if (results) {\n        // initializes the pairs for users if they're ready\n        db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\").doc(\"generatedPairs\").get().then(d => {\n          let pairs = d.data();\n          const currUser = firebase.auth().currentUser.uid;\n          let partner = pairs.pairs[currUser];\n          db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").doc(partner).get().then(a => setPartnerData(a.data()));\n          db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").doc(currUser).get().then(a => setUserData(a.data()));\n        });\n      }\n\n      setDisplayResults(results);\n    });\n  }, []);\n\n  const generatePairs = async () => {\n    let allQuestions = (await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get()).docs.map(d => d.data());\n    let answers = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data()); // assumes that responses array has the index represent question id and value represent which answer\n    // was picked\n\n    const toSend = {\n      questions: allQuestions,\n      answers: answers\n    };\n    let config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n    axios.post(\"http://localhost:4567/match\", toSend, config).then(response => {\n      console.log(response.data);\n      setPairs(response.data[\"pairs\"]);\n      db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\").doc(\"generatedPairs\").set({\n        pairs: response.data[\"pairs\"]\n      });\n      let idToNameTemp = {};\n\n      for (const [key, value] of Object.entries(response.data[\"pairs\"])) {\n        idToNameTemp[getNameFromUserID(key)] = getNameFromUserID(value);\n      }\n\n      console.log(idToNameTemp);\n      setIDToName(idToNameTemp);\n      alert(\"Successfully generated pairs!\");\n    }).catch(error => {\n      console.log(error);\n      alert(\"Oops, something went wrong.\");\n    });\n  }; // sets any info needed for survey\n\n\n  const loadInfo = async () => {\n    const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n    setCreator(doc.data().creator); // sets creator --> if current user matches this, display button to get results\n\n    setTitle(doc.data().title);\n    let temp = [];\n    const responses = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n    responses.forEach(user => {\n      temp.push(user);\n    });\n    setResults(temp);\n  };\n\n  const updateDisplayResults = async () => {\n    return await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\").doc(\"generatedPairs\").get().then(a => a.get(\"pairs\") !== undefined).catch(error => console.log(error));\n  };\n\n  const deleteSurvey = () => {\n    let input = prompt(\"Type DELETE to delete this survey.\");\n\n    if (input === \"DELETE\") {\n      const thisSurvey = db.collection(\"surveys\").doc(currentPoll); // apparently this doesn't delete subcollections so welp\n\n      thisSurvey.delete().then(x => {\n        alert(\"Survey Successfully Deleted!\");\n        window.location.replace(\"http://localhost:3000/Homepage\");\n      });\n    }\n  };\n\n  const deleteResponse = () => {\n    let input = prompt(\"Type DELETE to delete your response to this survey.\");\n\n    if (input === \"DELETE\") {\n      const userResponseRef = db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").doc(firebase.auth().currentUser.uid); // apparently this doesn't delete subcollections so welp\n\n      userResponseRef.delete().then(x => {\n        alert(\"Survey Successfully Deleted!\");\n        window.location.replace(\"http://localhost:3000/Homepage\");\n      });\n    }\n  };\n\n  const getNameFromUserID = async userID => {\n    return (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").doc(userID).get()).get(\"name\");\n  };\n\n  if (surveyCreator === firebase.auth().currentUser.uid) {\n    console.log(\"in admin\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Current Survey Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: results && results.map(user => {\n          return /*#__PURE__*/_jsxDEV(DisplayPerson, {\n            name: user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: generatePairs,\n        children: \"Click for Pairs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: pairs && Object.entries(pairs).map(([key, value]) => {\n          return /*#__PURE__*/_jsxDEV(DisplayPair, {\n            user1: idToName[key],\n            user2: idToName[value]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: deleteSurvey,\n        children: \"Delete This Survey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this);\n  } else {\n    // only displays results when everything is ready\n    if (displayResults && partnerData !== undefined && Object.keys(partnerData).length !== 0) {\n      console.log(pairs);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(UserDisplayPair, {\n          userData: userData,\n          partnerData: partnerData,\n          db: db,\n          currPoll: currentPoll\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Survey Results Aren't Ready Yet!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          typeof: \"button\",\n          onClick: deleteResponse,\n          children: \"Delete Response\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this);\n    }\n  }\n}\n\n_s(SurveyAdmin, \"rDgLd7JkG9ekVlcEPlQRleaKKgc=\");\n\n_c = SurveyAdmin;\nexport default SurveyAdmin;\n\nvar _c;\n\n$RefreshReg$(_c, \"SurveyAdmin\");","map":{"version":3,"sources":["/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/survey_display/SurveyAdmin.js"],"names":["DisplayPerson","DisplayPair","React","useEffect","useState","axios","firebase","UserDisplayPair","SurveyAdmin","props","surveyCreator","setCreator","displayResults","setDisplayResults","title","setTitle","results","setResults","pairs","setPairs","userData","setUserData","partnerData","setPartnerData","idToName","setIDToName","db","firestore","currentPoll","uniqueID","loadInfo","updateDisplayResults","then","collection","doc","get","d","data","currUser","auth","currentUser","uid","partner","a","generatePairs","allQuestions","orderBy","docs","map","answers","toSend","questions","config","headers","post","response","console","log","set","idToNameTemp","key","value","Object","entries","getNameFromUserID","alert","catch","error","creator","temp","responses","forEach","user","push","undefined","deleteSurvey","input","prompt","thisSurvey","delete","x","window","location","replace","deleteResponse","userResponseRef","userID","name","keys","length"],"mappings":"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","sourcesContent":["import DisplayPerson from \"./DisplayPerson\";\nimport DisplayPair from \"./DisplayPair.js\";\nimport React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport firebase from \"firebase\";\nimport UserDisplayPair from \"./UserDisplayPair\";\n\nfunction SurveyAdmin(props) {\n    const [surveyCreator, setCreator] = useState(\"\"); // use this to check if button should show up\n\n    const [displayResults, setDisplayResults] = useState(false);\n    const [title, setTitle] = useState(\"loading...\");\n    const [results, setResults] = useState([])\n    const [pairs, setPairs] = useState({})\n\n    const [userData, setUserData] = useState({});\n    const [partnerData, setPartnerData] = useState({});\n\n    const [idToName, setIDToName] = useState({});\n\n    const db = firebase.firestore();\n\n    const currentPoll = props.uniqueID;\n\n    // on page load, load in the survey\n    useEffect(() => {\n        loadInfo();\n        updateDisplayResults().then(results => {\n            if (results) {\n                // initializes the pairs for users if they're ready\n                db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n                    .doc(\"generatedPairs\").get().then(d => {\n                    let pairs = d.data();\n\n                    const currUser = firebase.auth().currentUser.uid;\n\n                    let partner = pairs.pairs[currUser];\n\n                    db.collection(\"surveys\").doc(currentPoll).collection(\"responses\")\n                        .doc(partner).get().then(a =>\n                        setPartnerData(a.data()));\n\n                    db.collection(\"surveys\").doc(currentPoll).collection(\"responses\")\n                        .doc(currUser).get().then(a =>\n                        setUserData(a.data()))\n                })\n            }\n            setDisplayResults(results);\n        })\n    }, [])\n\n\n    const generatePairs = async () => {\n        let allQuestions = (await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get()).docs.map(d => d.data());\n        let answers = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n\n        // assumes that responses array has the index represent question id and value represent which answer\n        // was picked\n        const toSend = {\n            questions: allQuestions,\n            answers: answers\n        };\n\n        let config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Access-Control-Allow-Origin': '*',\n            }\n        };\n\n        axios.post(\n            \"http://localhost:4567/match\",\n            toSend,\n            config\n        ).then(response => {\n            console.log(response.data)\n            setPairs(response.data[\"pairs\"])\n\n            db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n                .doc(\"generatedPairs\").set(\n                {pairs: response.data[\"pairs\"]}\n            )\n\n            let idToNameTemp = {};\n            for (const [key, value] of Object.entries(response.data[\"pairs\"])) {\n                idToNameTemp[getNameFromUserID(key)] = getNameFromUserID(value);\n            }\n\n            console.log(idToNameTemp);\n            setIDToName(idToNameTemp);\n\n            alert(\"Successfully generated pairs!\");\n        }).catch(error => {\n            console.log(error);\n            alert(\"Oops, something went wrong.\");\n        });\n    }\n\n    // sets any info needed for survey\n    const loadInfo = async () => {\n        const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n        setCreator(doc.data().creator); // sets creator --> if current user matches this, display button to get results\n        setTitle(doc.data().title);\n        let temp = []\n        const responses =\n            (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n        responses.forEach(user => {\n            temp.push(user)\n        })\n\n        setResults(temp)\n    }\n\n    const updateDisplayResults = async () => {\n        return await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n            .doc(\"generatedPairs\").get()\n            .then(a => a.get(\"pairs\") !== undefined).catch(error =>\n                console.log(error));\n    }\n\n    const deleteSurvey = () => {\n        let input = prompt(\"Type DELETE to delete this survey.\");\n        if (input === \"DELETE\") {\n            const thisSurvey = db.collection(\"surveys\").doc(currentPoll);\n\n            // apparently this doesn't delete subcollections so welp\n            thisSurvey.delete().then(x => {\n                alert(\"Survey Successfully Deleted!\")\n                window.location.replace(\"http://localhost:3000/Homepage\")\n            });\n        }\n    }\n\n    const deleteResponse = () => {\n        let input = prompt(\"Type DELETE to delete your response to this survey.\");\n        if (input === \"DELETE\") {\n            const userResponseRef = db.collection(\"surveys\").doc(currentPoll).collection(\"responses\")\n                .doc(firebase.auth().currentUser.uid);\n\n            // apparently this doesn't delete subcollections so welp\n            userResponseRef.delete().then(x => {\n                alert(\"Survey Successfully Deleted!\")\n                window.location.replace(\"http://localhost:3000/Homepage\")\n            });\n        }\n    }\n\n    const getNameFromUserID = async (userID) => {\n        return (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\")\n            .doc(userID).get()).get(\"name\");\n    }\n\n    if (surveyCreator === firebase.auth().currentUser.uid) {\n        console.log(\"in admin\");\n        return (\n            <div className=\"poll\">\n                <h1>{title}</h1>\n                <button>Current Survey Results</button>\n                <div>\n                    {results && results.map(user => {\n                        return (<DisplayPerson\n                            name={user.name}\n                        />);\n                    })}\n                </div>\n                <button type=\"button\" onClick={generatePairs}>Click for Pairs</button>\n                <div>\n                    {pairs && Object.entries(pairs).map(([key, value]) => {\n                        return (<DisplayPair\n                            user1={idToName[key]}\n                            user2={idToName[value]}\n                        />);\n                    })}\n                </div>\n                <button type=\"button\" onClick={deleteSurvey}>Delete This Survey</button>\n            </div>\n        );\n    } else {\n\n        // only displays results when everything is ready\n        if (displayResults && partnerData !== undefined && Object.keys(partnerData).length !== 0) {\n            console.log(pairs)\n            return (\n                <div className=\"poll\">\n                    <h1>{title}</h1>\n\n                    <UserDisplayPair\n                        userData={userData}\n                        partnerData={partnerData}\n                        db={db}\n                        currPoll={currentPoll}\n                    />\n\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"poll\">\n                    <h1>{title}</h1>\n                    <div>\n                        Survey Results Aren't Ready Yet!\n                    </div>\n\n\n                    <button typeof=\"button\" onClick={deleteResponse}>Delete Response</button>\n                </div>\n            );\n        }\n    }\n\n}\n\n\nexport default SurveyAdmin;"]},"metadata":{},"sourceType":"module"}