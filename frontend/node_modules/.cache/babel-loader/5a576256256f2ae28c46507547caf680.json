{"ast":null,"code":"var _jsxFileName = \"/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/survey_display/SurveyAdmin.js\",\n    _s = $RefreshSig$();\n\nimport DisplayPerson from \"./DisplayPerson\";\nimport DisplayPair from \"./DisplayPair.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport firebase from \"firebase\";\nimport UserDisplayPair from \"./UserDisplayPair\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SurveyAdmin(props) {\n  _s();\n\n  const [surveyCreator, setCreator] = useState(\"\"); // use this to check if button should show up\n\n  const [displayResults, setDisplayResults] = useState(false);\n  const [title, setTitle] = useState(\"loading...\");\n  const [results, setResults] = useState([]);\n  const [pairs, setPairs] = useState({});\n  const [userData, setUserData] = useState({});\n  const [partnerData, setPartnerData] = useState([]);\n  const [idToName, setIDToName] = useState({});\n  const db = firebase.firestore();\n  const currentPoll = props.uniqueID; // on page load, load in the survey\n\n  useEffect(() => {\n    loadInfo();\n    updateDisplayResults().then(results => {\n      const currUser = firebase.auth().currentUser.uid;\n\n      if (results && currUser !== surveyCreator) {\n        // initializes the pairs for users if they're ready\n        db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\").doc(\"generatedPairs\").get().then(d => {\n          let pairs = d.data();\n          let partnerList = pairs.pairs[currUser];\n          console.log(currUser);\n          let partDataList = [];\n\n          for (let i = 0; i < partnerList.length; i++) {\n            db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").doc(partnerList[i]).get().then(a => partDataList.push(a.data()));\n          }\n\n          setPartnerData(partDataList);\n          db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").doc(currUser).get().then(a => setUserData(a.data()));\n        });\n      }\n\n      setDisplayResults(results);\n    });\n  }, []);\n\n  const generatePairs = async () => {\n    let allQuestions = (await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get()).docs.map(d => d.data());\n    let answers = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data()); // assumes that responses array has the index represent question id and value represent which answer\n    // was picked\n\n    const toSend = {\n      questions: allQuestions,\n      answers: answers\n    };\n    console.log(answers);\n    let config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n    axios.post(\"http://localhost:4567/match\", toSend, config).then(async response => {\n      console.log(response.data);\n      setPairs(response.data[\"pairs\"]);\n      console.log(response.data[\"pairs\"]);\n      await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\").doc(\"generatedPairs\").set({\n        pairs: response.data[\"pairs\"]\n      });\n      let idToNameTemp = {};\n\n      for (const [key, value] of Object.entries(response.data[\"pairs\"])) {\n        let nameKey = await getNameFromUserID(key);\n        let nameValue = [];\n\n        for (let i = 0; i < value.length; i++) {\n          nameValue.push(await getNameFromUserID(value[i]));\n        }\n\n        idToNameTemp[nameKey] = nameValue;\n      }\n\n      console.log(idToNameTemp);\n      setIDToName(idToNameTemp);\n      alert(\"Successfully generated pairs!\");\n    }).catch(error => {\n      console.log(error);\n      alert(\"Oops, something went wrong.\");\n    });\n  }; // sets any info needed for survey\n\n\n  const loadInfo = async () => {\n    const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n    setCreator(doc.data().creator); // sets creator --> if current user matches this, display button to get results\n\n    setTitle(doc.data().title);\n    let temp = [];\n    const responses = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n    responses.forEach(user => {\n      temp.push(user);\n    });\n    setResults(temp);\n  };\n\n  const updateDisplayResults = async () => {\n    return await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\").doc(\"generatedPairs\").get().then(a => a.get(\"pairs\") !== undefined).catch(error => console.log(error));\n  };\n\n  const deleteSurvey = () => {\n    let input = prompt(\"Type DELETE to delete this survey.\");\n\n    if (input === \"DELETE\") {\n      const thisSurvey = db.collection(\"surveys\").doc(currentPoll); // apparently this doesn't delete subcollections so welp\n\n      thisSurvey.delete().then(x => {\n        alert(\"Survey Successfully Deleted!\");\n        window.location.replace(\"http://localhost:3000/Homepage\");\n      });\n    }\n  };\n\n  const deleteResponse = () => {\n    let input = prompt(\"Type DELETE to delete your response to this survey.\");\n\n    if (input === \"DELETE\") {\n      const userResponseRef = db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").doc(firebase.auth().currentUser.uid); // apparently this doesn't delete subcollections so welp\n\n      userResponseRef.delete().then(x => {\n        alert(\"Survey Successfully Deleted!\");\n        window.location.replace(\"http://localhost:3000/Homepage\");\n      });\n    }\n  };\n\n  const getNameFromUserID = async userID => {\n    console.log(\"Curr ID is: \" + userID);\n    const responsesRef = db.collection(\"surveys\").doc(currentPoll).collection(\"responses\");\n    const ref = await responsesRef.doc(userID).get();\n    return ref.get(\"name\");\n  };\n\n  if (surveyCreator === firebase.auth().currentUser.uid) {\n    console.log(\"in admin\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Current Survey Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: results && results.map(user => {\n          return /*#__PURE__*/_jsxDEV(DisplayPerson, {\n            name: user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: generatePairs,\n        children: \"Click for Pairs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: pairs && Object.entries(idToName).map(([key, value]) => {\n          return /*#__PURE__*/_jsxDEV(DisplayPair, {\n            user1: key,\n            matches: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: deleteSurvey,\n        children: \"Delete This Survey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this);\n  } else {\n    // only displays results when everything is ready\n    if (displayResults && partnerData !== undefined && Object.keys(partnerData).length !== 0) {\n      console.log(pairs);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(UserDisplayPair, {\n          userData: userData,\n          partnerData: partnerData,\n          db: db,\n          currPoll: currentPoll\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Survey Results Aren't Ready Yet!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          typeof: \"button\",\n          onClick: deleteResponse,\n          children: \"Delete Response\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }, this);\n    }\n  }\n}\n\n_s(SurveyAdmin, \"N2Z/GsORUCGlFZLJ538h3mg2Fpc=\");\n\n_c = SurveyAdmin;\nexport default SurveyAdmin;\n\nvar _c;\n\n$RefreshReg$(_c, \"SurveyAdmin\");","map":{"version":3,"sources":["/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/survey_display/SurveyAdmin.js"],"names":["DisplayPerson","DisplayPair","React","useEffect","useState","axios","firebase","UserDisplayPair","SurveyAdmin","props","surveyCreator","setCreator","displayResults","setDisplayResults","title","setTitle","results","setResults","pairs","setPairs","userData","setUserData","partnerData","setPartnerData","idToName","setIDToName","db","firestore","currentPoll","uniqueID","loadInfo","updateDisplayResults","then","currUser","auth","currentUser","uid","collection","doc","get","d","data","partnerList","console","log","partDataList","i","length","a","push","generatePairs","allQuestions","orderBy","docs","map","answers","toSend","questions","config","headers","post","response","set","idToNameTemp","key","value","Object","entries","nameKey","getNameFromUserID","nameValue","alert","catch","error","creator","temp","responses","forEach","user","undefined","deleteSurvey","input","prompt","thisSurvey","delete","x","window","location","replace","deleteResponse","userResponseRef","userID","responsesRef","ref","name","keys"],"mappings":"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","sourcesContent":["import DisplayPerson from \"./DisplayPerson\";\nimport DisplayPair from \"./DisplayPair.js\";\nimport React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport firebase from \"firebase\";\nimport UserDisplayPair from \"./UserDisplayPair\";\n\nfunction SurveyAdmin(props) {\n    const [surveyCreator, setCreator] = useState(\"\"); // use this to check if button should show up\n\n    const [displayResults, setDisplayResults] = useState(false);\n    const [title, setTitle] = useState(\"loading...\");\n    const [results, setResults] = useState([])\n    const [pairs, setPairs] = useState({})\n\n    const [userData, setUserData] = useState({});\n    const [partnerData, setPartnerData] = useState([]);\n\n    const [idToName, setIDToName] = useState({});\n\n    const db = firebase.firestore();\n\n    const currentPoll = props.uniqueID;\n\n    // on page load, load in the survey\n    useEffect(() => {\n        loadInfo();\n        updateDisplayResults().then(results => {\n            const currUser = firebase.auth().currentUser.uid;\n            if (results && currUser !== surveyCreator) {\n                // initializes the pairs for users if they're ready\n                db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n                    .doc(\"generatedPairs\").get().then(d => {\n                    let pairs = d.data();\n\n                    let partnerList = pairs.pairs[currUser];\n                    console.log(currUser);\n                    let partDataList = [];\n\n                    for (let i = 0; i < partnerList.length; i++) {\n                        db.collection(\"surveys\").doc(currentPoll).collection(\"responses\")\n                            .doc(partnerList[i]).get().then(a =>\n                            partDataList.push(a.data()));\n                    }\n                    setPartnerData(partDataList);\n\n\n                    db.collection(\"surveys\").doc(currentPoll).collection(\"responses\")\n                        .doc(currUser).get().then(a =>\n                        setUserData(a.data()))\n                })\n            }\n            setDisplayResults(results);\n        })\n    }, [])\n\n\n    const generatePairs = async () => {\n        let allQuestions = (await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get()).docs.map(d => d.data());\n        let answers = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n\n        // assumes that responses array has the index represent question id and value represent which answer\n        // was picked\n        const toSend = {\n            questions: allQuestions,\n            answers: answers\n        };\n\n        console.log(answers);\n\n        let config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Access-Control-Allow-Origin': '*',\n            }\n        };\n\n        axios.post(\n            \"http://localhost:4567/match\",\n            toSend,\n            config\n        ).then(async response =>  {\n            console.log(response.data)\n            setPairs(response.data[\"pairs\"])\n            console.log(response.data[\"pairs\"]);\n\n            await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n                .doc(\"generatedPairs\").set(\n                    {pairs: response.data[\"pairs\"]}\n                )\n\n            let idToNameTemp = {};\n            for (const [key, value] of Object.entries(response.data[\"pairs\"])) {\n                let nameKey = await getNameFromUserID(key);\n                let nameValue = []\n                for (let i = 0; i < value.length; i++) {\n                    nameValue.push(await getNameFromUserID(value[i]));\n                }\n                idToNameTemp[nameKey] = nameValue;\n            }\n\n            console.log(idToNameTemp);\n            setIDToName(idToNameTemp);\n\n            alert(\"Successfully generated pairs!\");\n        }).catch(error => {\n            console.log(error);\n            alert(\"Oops, something went wrong.\");\n        });\n    }\n\n    // sets any info needed for survey\n    const loadInfo = async () => {\n        const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n        setCreator(doc.data().creator); // sets creator --> if current user matches this, display button to get results\n        setTitle(doc.data().title);\n        let temp = []\n        const responses =\n            (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n        responses.forEach(user => {\n            temp.push(user)\n        })\n\n        setResults(temp)\n    }\n\n    const updateDisplayResults = async () => {\n        return await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n            .doc(\"generatedPairs\").get()\n            .then(a => a.get(\"pairs\") !== undefined).catch(error =>\n                console.log(error));\n    }\n\n    const deleteSurvey = () => {\n        let input = prompt(\"Type DELETE to delete this survey.\");\n        if (input === \"DELETE\") {\n            const thisSurvey = db.collection(\"surveys\").doc(currentPoll);\n\n            // apparently this doesn't delete subcollections so welp\n            thisSurvey.delete().then(x => {\n                alert(\"Survey Successfully Deleted!\")\n                window.location.replace(\"http://localhost:3000/Homepage\")\n            });\n        }\n    }\n\n    const deleteResponse = () => {\n        let input = prompt(\"Type DELETE to delete your response to this survey.\");\n        if (input === \"DELETE\") {\n            const userResponseRef = db.collection(\"surveys\").doc(currentPoll).collection(\"responses\")\n                .doc(firebase.auth().currentUser.uid);\n\n            // apparently this doesn't delete subcollections so welp\n            userResponseRef.delete().then(x => {\n                alert(\"Survey Successfully Deleted!\")\n                window.location.replace(\"http://localhost:3000/Homepage\")\n            });\n        }\n    }\n\n    const getNameFromUserID = async (userID) => {\n        console.log(\"Curr ID is: \" + userID);\n        const responsesRef = db.collection(\"surveys\").doc(currentPoll).collection(\"responses\");\n        const ref = (await responsesRef.doc(userID).get());\n        return ref.get(\"name\");\n    }\n\n    if (surveyCreator === firebase.auth().currentUser.uid) {\n        console.log(\"in admin\");\n        return (\n            <div className=\"poll\">\n                <h1>{title}</h1>\n                <button>Current Survey Results</button>\n                <div>\n                    {results && results.map(user => {\n                        return (<DisplayPerson\n                            name={user.name}\n                        />);\n                    })}\n                </div>\n                <button type=\"button\" onClick={generatePairs}>Click for Pairs</button>\n                <div>\n                    {pairs && Object.entries(idToName).map(([key, value]) => {\n                        return (<DisplayPair\n                            user1={key}\n                            matches={value}\n                        />);\n                    })}\n                </div>\n                <button type=\"button\" onClick={deleteSurvey}>Delete This Survey</button>\n            </div>\n        );\n    } else {\n\n        // only displays results when everything is ready\n        if (displayResults && partnerData !== undefined && Object.keys(partnerData).length !== 0) {\n            console.log(pairs)\n            return (\n                <div className=\"poll\">\n                    <h1>{title}</h1>\n\n                    <UserDisplayPair\n                        userData={userData}\n                        partnerData={partnerData}\n                        db={db}\n                        currPoll={currentPoll}\n                    />\n\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"poll\">\n                    <h1>{title}</h1>\n                    <div>\n                        Survey Results Aren't Ready Yet!\n                    </div>\n\n\n                    <button typeof=\"button\" onClick={deleteResponse}>Delete Response</button>\n                </div>\n            );\n        }\n    }\n\n}\n\n\nexport default SurveyAdmin;"]},"metadata":{},"sourceType":"module"}