{"ast":null,"code":"var _jsxFileName = \"/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/Alana_stuff/SurveyAdmin.js\",\n    _s = $RefreshSig$();\n\nimport DisplayPerson from \"./DisplayPerson\";\nimport DisplayPair from \"./DisplayPair.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport firebase from \"firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nasync function SurveyAdmin(props) {\n  _s();\n\n  const [surveyCreator, setCreator] = useState(\"\"); // use this to check if button should show up\n\n  const [title, setTitle] = useState(\"loading...\");\n  const [results, setResults] = useState([]);\n  const [pairs, setPairs] = useState([]);\n  const db = firebase.firestore(); // EDIT THIS DEPENDING ON WHAT SURVEY IS NEEDED.\n\n  const currentPoll = props.uniqueID; // on page load, load in the survey\n\n  useEffect(() => {\n    loadInfo();\n  }, []);\n\n  const generatePairs = async () => {\n    let allQuestions = (await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get()).docs.map(d => d.data());\n    let answers = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data()); // assumes that responses array has the index represent question id and value represent which answer\n    // was picked\n\n    const toSend = {\n      questions: allQuestions,\n      answers: answers\n    };\n    let config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n    axios.post(\"http://localhost:4567/match\", toSend, config).then(response => {\n      console.log(response.data);\n      setPairs(response.data[\"pairs\"]);\n      db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\").doc(\"generatedPairs\").set({\n        pairs: response.data[\"pairs\"]\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }; // sets any info needed for survey\n\n\n  const loadInfo = async () => {\n    const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n    setCreator(doc.data().creator); // sets creator --> if current user matches this, display button to get results\n\n    setTitle(doc.data().title);\n    let temp = [];\n    const responses = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n    responses.forEach(user => {\n      temp.push(user);\n    });\n    setResults(temp);\n  };\n\n  const onPairClicked = () => {\n    console.log(\"Temp has: \" + results);\n    console.log(results);\n  };\n\n  const displayResults = async () => {\n    return await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\").doc(\"generatedPairs\").get().then(a => a.get(\"pairs\") !== undefined).catch(error => console.log(error));\n  };\n\n  if (surveyCreator === firebase.auth().currentUser.uid) {\n    console.log(\"in admin\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"poll\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Current Survey Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: results && results.map(user => {\n          return /*#__PURE__*/_jsxDEV(DisplayPerson, {\n            name: user.userID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: generatePairs,\n        children: \"Click for Pairs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: pairs && Object.entries(pairs).map(([key, value]) => {\n          return /*#__PURE__*/_jsxDEV(DisplayPair, {\n            user1: key,\n            user2: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 33\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  } else {\n    // console.log(pairs)\n    // const getPairs = async () => {\n    //     let pairs = await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n    //         .doc(\"generatedPairs\").get().then(snap =>snap.data())\n    //    console.log(pairs[0])\n    // }\n    // getPairs()\n    // if the pairs aren't ready, then it should be undefined; and vice versa\n    let displayResults = await displayResults();\n\n    if (displayResults) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onPairClicked,\n          children: \"Your Current Pair\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"$\", pairs[firebase.auth().currentUser.uid.toString()]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), \"ur not admin\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"poll\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), \"Survey Results Aren't Ready Yet!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this);\n    }\n  }\n}\n\n_s(SurveyAdmin, \"bF+a1fq2a/ou/VBYcNsuoWCPU9Q=\");\n\n_c = SurveyAdmin;\nexport default SurveyAdmin;\n\nvar _c;\n\n$RefreshReg$(_c, \"SurveyAdmin\");","map":{"version":3,"sources":["/Users/pedromonteiroborges/Desktop/CS32/Projects/term-project-awhite35-mcamach6-mhe26-pmontei1/frontend/src/Alana_stuff/SurveyAdmin.js"],"names":["DisplayPerson","DisplayPair","React","useEffect","useState","axios","firebase","SurveyAdmin","props","surveyCreator","setCreator","title","setTitle","results","setResults","pairs","setPairs","db","firestore","currentPoll","uniqueID","loadInfo","generatePairs","allQuestions","collection","doc","orderBy","get","docs","map","d","data","answers","toSend","questions","config","headers","post","then","response","console","log","set","catch","error","creator","temp","responses","forEach","user","push","onPairClicked","displayResults","a","undefined","auth","currentUser","uid","userID","Object","entries","key","value","toString"],"mappings":"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","sourcesContent":["import DisplayPerson from \"./DisplayPerson\";\nimport DisplayPair from \"./DisplayPair.js\";\nimport React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport firebase from \"firebase\";\n\nasync function SurveyAdmin(props) {\n    const [surveyCreator, setCreator] = useState(\"\"); // use this to check if button should show up\n\n    const [title, setTitle] = useState(\"loading...\");\n    const [results, setResults] = useState([])\n    const [pairs, setPairs] = useState([])\n    const db = firebase.firestore();\n    // EDIT THIS DEPENDING ON WHAT SURVEY IS NEEDED.\n    const currentPoll = props.uniqueID;\n\n    // on page load, load in the survey\n    useEffect(() => {\n        loadInfo();\n    }, [])\n\n    const generatePairs = async () => {\n        let allQuestions = (await db.collection(\"surveys\").doc(currentPoll).collection(\"questions\").orderBy(\"questionnumber\").get()).docs.map(d => d.data());\n        let answers = (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n\n        // assumes that responses array has the index represent question id and value represent which answer\n        // was picked\n        const toSend = {\n            questions: allQuestions,\n            answers: answers\n        };\n\n        let config = {\n            headers: {\n                \"Content-Type\": \"application/json\",\n                'Access-Control-Allow-Origin': '*',\n            }\n        };\n\n        axios.post(\n            \"http://localhost:4567/match\",\n            toSend,\n            config\n        ).then(response => {\n            console.log(response.data)\n            setPairs(response.data[\"pairs\"])\n\n            db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n                .doc(\"generatedPairs\").set(\n                {pairs: response.data[\"pairs\"]}\n            )\n        }).catch(error => {\n            console.log(error);\n        });\n    }\n\n    // sets any info needed for survey\n    const loadInfo = async () => {\n        const doc = await db.collection(\"surveys\").doc(currentPoll).get();\n        setCreator(doc.data().creator); // sets creator --> if current user matches this, display button to get results\n        setTitle(doc.data().title);\n        let temp = []\n        const responses =\n            (await db.collection(\"surveys\").doc(currentPoll).collection(\"responses\").orderBy(\"userID\").get()).docs.map(d => d.data());\n        responses.forEach(user => {\n            temp.push(user)\n        })\n\n        setResults(temp)\n    }\n\n    const onPairClicked = () => {\n        console.log(\"Temp has: \" + results);\n        console.log(results);\n    }\n\n    const displayResults = async () => {\n        return await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n            .doc(\"generatedPairs\").get()\n            .then(a => a.get(\"pairs\") !== undefined).catch(error =>\n                console.log(error));\n    }\n\n    if (surveyCreator === firebase.auth().currentUser.uid) {\n        console.log(\"in admin\");\n        return (\n            <div className=\"poll\">\n                <h1>{title}</h1>\n                <button>Current Survey Results</button>\n                <div>\n                    {results && results.map(user => {\n                        return (<DisplayPerson\n                            name={user.userID}\n                        />);\n                    })}\n                </div>\n                <button type=\"button\" onClick={generatePairs}>Click for Pairs</button>\n                <div>\n                    {pairs && Object.entries(pairs).map(([key, value]) => {\n                        return (<DisplayPair\n                            user1={key}\n                            user2={value}\n                        />);\n                    })}\n                </div>\n            </div>\n        );\n    } else {\n        // console.log(pairs)\n        // const getPairs = async () => {\n        //     let pairs = await db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")\n        //         .doc(\"generatedPairs\").get().then(snap =>snap.data())\n        //    console.log(pairs[0])\n        // }\n        // getPairs()\n\n        // if the pairs aren't ready, then it should be undefined; and vice versa\n\n\n        let displayResults = await displayResults();\n        if (displayResults) {\n            return (\n                <div className=\"poll\">\n                    <h1>{title}</h1>\n                    <button onClick={onPairClicked}>Your Current Pair</button>\n                    <div>\n                        {/*{ db.collection(\"surveys\").doc(currentPoll).collection(\"pairs\")*/}\n                        {/*    .doc(\"generatedPairs\").get().then(snap => snap.exists) &&*/}\n\n                        {/*    <div>*/}\n                        {/*        You have been paired with:*/}\n                        {/*        pairs[0]*/}\n\n                        {/*    </div>*/}\n                        {/*}*/}\n                        ${\n                        pairs[firebase.auth().currentUser.uid.toString()]\n                    }\n                    </div>\n                    ur not admin\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"poll\">\n                    <h1>{title}</h1>\n                    Survey Results Aren't Ready Yet!\n                </div>\n            );\n        }\n    }\n\n}\n\n\nexport default SurveyAdmin;"]},"metadata":{},"sourceType":"module"}